nohup: ignoring input
Task exception was never retrieved
future: <Task finished name='Task-505' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-3326' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-3327' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-3328' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-3329' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-3330' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-3331' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-6214' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-6215' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-6216' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-6217' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-6218' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-6219' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-9005' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-9006' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-9007' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-9008' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-9009' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-9010' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-11728' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-11729' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-11730' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-11731' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-11732' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-11733' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-14467' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-14468' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-14469' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-14470' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-14471' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-14472' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-17402' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-17403' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-17404' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-17405' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-17406' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-17407' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-20196' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-20197' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-20198' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-20199' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-20200' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-20201' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-22871' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-22872' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-22873' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-22874' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-22875' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-22876' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-25584' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-25585' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-25586' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-25587' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-25588' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-25589' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-28259' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-28260' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-28261' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-28262' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-28263' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-28264' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-30937' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-30938' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-30939' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-30940' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-30941' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-30942' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-33771' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-33772' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-33773' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-33774' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-33775' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-33776' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-36658' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-36659' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-36660' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-36661' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-36662' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-36663' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-39557' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-39558' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-39559' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-39560' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-39561' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-39562' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-42225' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-42226' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-42227' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-42228' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-42229' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-42230' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-44764' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-44765' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-44766' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-44767' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-44768' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Task exception was never retrieved
future: <Task finished name='Task-44769' coro=<AsyncClient.aclose() done, defined at /mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py:1978> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_client.py", line 1985, in aclose
    await self._transport.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpx/_transports/default.py", line 406, in aclose
    await self._pool.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/streams/tls.py", line 201, in aclose
    await self.transport_stream.aclose()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1306, in aclose
    self._transport.close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 1210, in close
    super().close()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/selector_events.py", line 875, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 795, in call_soon
    self._check_closed()
  File "/mnt/linuxlab/home/dobrien5/miniconda3/lib/python3.12/asyncio/base_events.py", line 541, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
0
```python
def twoSum(nums, target):
    map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in map:
            return [map[complement], i]
        map[num] = i
    return []
```


Execution time: 13.819716314999937 seconds
```python
def two_sum(nums, target):
    seen = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in seen:
            return [seen[complement], i]
        else:
            seen[num] = i
    return []
```

or more Pythonic way using the `Counter` class from the `collections` module:

```python
from collections import Counter

def two_sum(nums, target):
    counter = Counter(nums)
    for num in nums:
        complement = target - num
        if complement in counter and counter[complement] != 0:
            return [num, complement]
        counter[num] -= 1
    return []
```
1
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy = ListNode(0)
    current = dummy
    carry = 0

    while l1 or l2 or carry:
        sum_val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + carry
        carry = sum_val // 10
        current.next = ListNode(sum_val % 10)
        current = current.next

        if l1: l1 = l1.next
        if l2: l2 = l2.next

    return dummy.next
```


Execution time: 13.452577560999998 seconds
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:
    dummy = ListNode(0)
    current = dummy
    carry = 0
    
    while l1 or l2 or carry:
        sum_ = (l1 and l1.val) + (l2 and l2.val) + carry
        value = sum_ % 10
        carry = sum_ // 10
        
        current.next = ListNode(value)
        current = current.next
        
        l1 = l1 and l1.next
        l2 = l2 and l2.next
    
    return dummy.next

# Example usage:
# l1: 2 -> 4 -> 3
# l2: 5 -> 6 -> 4
l1 = ListNode(2)
l1.next = ListNode(4)
l1.next.next = ListNode(3)

l2 = ListNode(5)
l2.next = ListNode(6)
l2.next.next = ListNode(4)

result = addTwoNumbers(l1, l2)

# Print the result
while result:
    print(result.val, end=" -> ")
    result = result.next

# Output: 7 -> 0 -> 8
```
2
```python
def length_of_longest_substring(s: str) -> int:
    left = 0
    right = 0
    max_length = 0
    characters = set()

    while right < len(s):
        if s[right] not in characters:
            characters.add(s[right])
            max_length = max(max_length, right - left + 1)
            right += 1
        else:
            characters.remove(s[left])
            left += 1

    return max_length
```


Execution time: 11.80409196100004 seconds
```python
def longest_substring(s):
    char_set = set()
    max_length = 0
    
    left = 0
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        
        char_set.add(s[right])
        max_length = max(max_length, right - left + 1)
    
    return max_length

# Example usage:
input_str = "abcabcbb"
print(longest_substring(input_str))  # Output: 3
```
3
```python
def findMedianSortedArrays(nums1, nums2):
    if len(nums1) > len(nums2):
        return findMedianSortedArrays(nums2, nums1)
    
    x, y = len(nums1), len(nums2)
    low, high = 0, x

    while low <= high:
        partition_x = (low + high) // 2
        partition_y = (x + y + 1) // 2 - partition_x

        max_left_x = float('-inf') if partition_x == 0 else nums1[partition_x - 1]
        min_right_x = float('inf') if partition_x == x else nums1[partition_x]

        max_left_y = float('-inf') if partition_y == 0 else nums2[partition_y - 1]
        min_right_y = float('inf') if partition_y == y else nums2[partition_y]

        if max_left_x <= min_right_y and max_left_y <= min_right_x:
            if (x + y) % 2 == 0:
                return (max(max_left_x, max_left_y) + min(min_right_x, min_right_y)) / 2
            else:
                return max(max_left_x, max_left_y)
        elif max_left_x > min_right_y:
            high = partition_x - 1
        else:
            low = partition_x + 1
    
    return 0
```


Execution time: 16.017277414999967 seconds
```python
def findMedianSortedArrays(nums1, nums2):
    # Step 1: Find the smaller array and make it nums1 for simplicity
    if len(nums1) < len(nums2):
        small = nums1
        big = nums2
    else:
        small = nums2
        big = nums1

    # Step 2: Use Binary Search to partition the smaller array
    left, right = 0, len(small)
    while left <= right:
        # Midpoint Convergence
        i = (left + right) // 2
        merge_leftX = small[:i]
        merge_rightX = small[i:]
        
        # Step 3: Calculate the position of partition in the larger array (nums2)
        maxSizeLeft = len(merge_leftX)
        minSizeRight = len(merge_rightX)

        if i == 0:
            maxSizeLeft2 = 0
        else:
            maxSizeLeft2 = max(merge_leftX[i - 1], merge_leftX[-1])

        # Step 4: Calculate the position of partition in the larger array (nums2)
        if i == len(small):
            minSizeRight2 = float('inf')
        else:
            minSizeRight2 = min(merge_rightX[0], merge_rightX[0])

        maxSizeLeft, minSizeRight = 0, float('inf')

        # Step 5: Check the condition for correct partition
        if maxSizeLeft <= minSizeRight and maxSizeLeft2 <= minSizeRight2:
            break

        # Adjust the partition of nums1
        elif max(merge_leftX[-1], merge_rightX[0]) > min(merge_leftX[0], merge_rightX[-1]):
            left = i + 1
        else:
            right = i - 1

    # Step 6: Merge the two arrays and calculate the median
    merged = sorted(merge_leftX + merge_rightX)
    length = len(merged)

    if length % 2 == 0:
        return (merged[length // 2] + merged[length // 2 - 1]) / 2
    else:
        return merged[length // 2]

# Test the function
print(findMedianSortedArrays([1,3], [2]))
```
4
```python
def longest_palindromic_substring(s: str) -> str:
    n = len(s)
    if n == 0: return ""

    start, max_length = 0, 1

    for i in range(n):
        l, r = i, i

        while r < n - 1 and s[r] == s[r + 1]:
            r += 1
        i = r

        while l > 0 and r < n - 1 and s[l - 1] == s[r + 1]:
            l -= 1
            r += 1

        length = r - l + 1
        if length > max_length:
            start, max_length = l, length

    return s[start:start + max_length]
```


Execution time: 13.652532706999978 seconds
```python
def longest_palindrome(s):
    def expand_around_center(left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left + 1:right]

    start = 0
    max_length = 1

    for i in range(len(s)):
        # Check for odd-length palindromes
        l, r = i, i
        while l >= 0 and r < len(s) and s[l] == s[r]:
            current_palindrome = expand_around_center(l, r)
            if len(current_palindrome) > max_length:
                start = l
                max_length = len(current_palindrome)
            l -= 1
            r += 1

        # Check for even-length palindromes
        l, r = i, i + 1
        while l >= 0 and r < len(s) and s[l] == s[r]:
            current_palindrome = expand_around_center(l, r)
            if len(current_palindrome) > max_length:
                start = l
                max_length = len(current_palindrome)
            l -= 1
            r += 1

    return s[start:start + max_length]
```
5
```python
def convert(s: str, numRows: int) -> str:
    if numRows == 1 or numRows >= len(s):
        return s

    rows = [""] * numRows
    curRow = 0
    goingDown = False

    for c in s:
        rows[curRow] += c
        if curRow == 0 or curRow == numRows - 1:
            goingDown = not goingDown
        curRow += 1 if goingDown else -1

    return "".join(rows)
```


Execution time: 12.330073066999944 seconds
```python
def zigzag(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    
    rows = [''] * numRows
    direction = 0
    cur_row = 0
    
    for char in s:
        rows[cur_row] += char
        
        if cur_row == 0:
            direction = 1
        elif cur_row == numRows - 1:
            direction = 0
            
        if direction:
            cur_row -= 1
        else:
            cur_row += 1
            
    return ''.join(rows)
```
6
```python
def reverse(x: int) -> int:
    sign = -1 if x < 0 else 1
    x = abs(x)
    res = 0
    while x:
        res = res * 10 + x % 10
        x //= 10
    res *= sign
    return res if -2**31 <= res <= 2**31 - 1 else 0
```


Execution time: 11.602110176999986 seconds
```python
def reverse(x):
    res = 0
    sign = -1 if x < 0 else 1
    x *= sign
    
    while x > 0:
        digit = x % 10
        x //= 10
        
        # Check for potential overflow before adding to result
        if res * 10 + digit >= 2**31 - 1:
            return 0
        
        res = res * 10 + digit
    
    res *= sign
    return res
```
7
```python
def myAtoi(s):
    result, i, sign = 0, 0, 1
    while i < len(s) and s[i] == ' ': i += 1
    if i < len(s) and (s[i] == '-' or s[i] == '+'):
        sign = -1 if s[i] == '-' else 1
        i += 1
    while i < len(s) and s[i].isdigit():
        result = result * 10 + int(s[i])
        i += 1
        if result * sign > 2**31 - 1: return 2**31 - 1
        if result * sign < -2**31: return -2**31
    return result * sign
```


Execution time: 13.548329421000062 seconds
```python
def stringToInteger(s):
    result = 0
    i = 0
    sign = 1
    
    while i < len(s) and s[i] == ' ':
        i += 1
        
    if i < len(s) and (s[i] == '-' or s[i] == '+'):
        if s[i] == '-':
            sign = -1
        i += 1

    while i < len(s):
        if not s[i].isdigit():
            break
        result = result * 10 + int(s[i])
        i += 1
        
    if result * sign > 2**31-1 or result * sign < -2**31:
        return 0 if result * sign >= 0 else -2147483648
    
    return result * sign

# Testing the function
print(stringToInteger("42")) # Output: 42
print(stringToInteger("-42")) # Output: -42
print(stringToInteger("4193 with words")) # Output: 4193
print(stringToInteger("words and 987")) # Output: 0
```
8
```python
def is_palindrome(x: int) -> bool:
    if x < 0:
        return False
    original, reversed = x, 0
    while x > 0:
        reversed = reversed * 10 + x % 10
        x //= 10
    return original == reversed
```



Execution time: 11.417109714999924 seconds
```python
def is_palindrome(x: int) -> bool:
    if x < 0:
        return False

    original = x
    reversed_int = 0

    while x > 0:
        reversed_int = (reversed_int * 10) + (x % 10)
        x //= 10

    return original == reversed_int
```
9
```python
def is_match(s: str, p: str) -> bool:
    m, n = len(s), len(p)
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True

    for j in range(1, n + 1):
        if p[j - 1] == '*' and dp[0][j - 2]:
            dp[0][j] = True

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))

    return dp[m][n]
```


Execution time: 13.451581854000096 seconds
```python
def is_match(s: str, p: str) -> bool:
    m, n = len(s), len(p)
    dp = [[False] * (n + 1) for _ in range(m + 1)]

    # Edge case: empty pattern matches empty string
    dp[0][0] = True

    for i in range(1, m + 1):
        if p[0] == s[i - 1] or p[0] == '.':
            dp[i][1] = dp[i - 1][1]

    for j in range(2, n + 1):
        if p[j - 1] == '*':
            dp[m][j] = dp[m][j - 2]
            for i in range(m - 1, -1, -1):
                if (p[j - 2] == s[i] or p[j - 2] == '.'):
                    dp[i][j] = dp[i + 1][j - 2] | dp[i][j]

    return dp[m][n]
```
10
```python
def max_area(height):
    max_area, left, right = 0, 0, len(height) - 1
    while left < right:
        max_area = max(max_area, min(height[left], height[right]) * (right - left))
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area
```


Execution time: 12.692814318000046 seconds
```python
def maxArea(height):
    max_area = 0
    left, right = 0, len(height) - 1
    
    while left < right:
        width = right - left
        current_height = min(height[left], height[right])
        current_area = width * current_height
        
        if current_area > max_area:
            max_area = current_area
            
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
            
    return max_area

# Test the function with a list of heights
print(maxArea([1,8,6,2,5,4,8,3,7]))
```
11
```python
def int_to_roman(num):
    romans = [
        (1000, "M"), (900, "CM"), (500, "D"),
        (400, "CD"), (100, "C"), (90, "XC"),
        (50, "L"), (40, "XL"), (10, "X"), 
        (9, "IX"), (5, "V"), (4, "IV"), (1, "I")
    ]
    roman = ""
    for value, symbol in romans:
        while num >= value:
            roman += symbol
            num -= value
    return roman
```


Execution time: 12.696737133999932 seconds
```python
import heapq

def roman_sort(num):
    pairs = [(int('IV', 10), 'IV'), (int('IX', 10), 'IX'),
             (int('XL', 10), 'XL'), (int('XC', 10), 'XC'),
             (int('CD', 10), 'CD'), (int('CM', 10), 'CM')]
    
    heap = []
    for pair in pairs:
        heapq.heappush(heap, (-pair[0], pair[1]))
        
    result = ''
    while num > 0 and heap:
        decimal_value, roman_numeral = heapq.heappop(heap)
        if num >= abs(decimal_value):
            result += roman_numeral
            num -= -decimal_value
        else:
            heapq.heappush(heap, (decimal_value, roman_numeral))
            
    return result

print(roman_sort(3))  # Output: III
```
12
```python
def roman_to_int(s):
    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev_value = 0
    
    for c in s:
        current_value = roman_values[c]
        if current_value > prev_value:
            total += current_value - 2 * prev_value
        else:
            total += current_value
        prev_value = current_value

    return total
```



Execution time: 13.986612880000052 seconds
```python
class RomanToInteger:
    def __init__(self):
        self.num_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        self.total = 0
        self.prev_value = 0

    def roman_to_int(self, s):
        for i in range(len(s) - 1, -1, -1):
            if self.num_map[s[i]] >= self.prev_value:
                self.total += self.num_map[s[i]]
            else:
                self.total -= 2 * self.num_map[s[i]]
            self.prev_value = self.num_map[s[i]]

        return self.total


roman_numeral_converter = RomanToInteger()
print(roman_numeral_converter.roman_to_int("IV"))  # Output: 4
print(roman_numeral_converter.roman_to_int("IX"))  # Output: 9
print(roman_numeral_converter.roman_to_int("LVIII"))  # Output: 58
print(roman_numeral_converter.roman_to_int("MCMXCIV"))  # Output: 1994
```

This code uses a dictionary to map Roman numerals to their integer values and iterates over the input string from right to left, processing each character as it goes. If the current value is greater than or equal to the previous one, it's added directly; otherwise, the total is adjusted by subtracting twice the previous value. This approach allows for efficient handling of Roman numerals with subtractive notation and ensures that the solution can handle complex cases correctly.
13
```python
def longest_common_prefix(strs):
    if not strs:
        return ""

    for i, c in enumerate(strs[0]):
        for j in range(1, len(strs)):
            if i == len(strs[j]) or strs[j][i] != c:
                return strs[0][:i]
    return strs[0]
```


Execution time: 11.33378669900003 seconds
```python
def longestCommonPrefix(strs):
    if not strs:
        return ""

    prefix = ""
    for chars in zip(*strs):
        if len(set(chars)) == 1:
            prefix += chars[0]
        else:
            break

    return prefix
```
14
```python
def threeSum(nums):
    nums.sort()
    result = []

    for i in range(len(nums) - 2):
        if i == 0 or nums[i] != nums[i - 1]:
            j, k = i + 1, len(nums) - 1
            while j < k:
                s = nums[i] + nums[j] + nums[k]
                if s == 0:
                    result.append([nums[i], nums[j], nums[k]])
                    while j < k and nums[j] == nums[j + 1]:
                        j += 1
                    while j < k and nums[k] == nums[k - 1]:
                        k -= 1
                    j += 1
                    k -= 1
                elif s < 0:
                    j += 1
                else:
                    k -= 1

    return result
```


Execution time: 12.972798762000025 seconds
```python
def three_sum(nums):
    nums.sort()
    result = []
    for i in range(len(nums) - 2):
        if i == 0 or nums[i] != nums[i-1]:
            j, k = i+1, len(nums)-1
            while j < k:
                s = nums[i] + nums[j] + nums[k]
                if s < 0:
                    j += 1
                elif s > 0:
                    k -= 1
                else:
                    result.append([nums[i], nums[j], nums[k]])
                    while j < k and nums[j] == nums[j+1]:
                        j += 1
                    while j < k and nums[k] == nums[k-1]:
                        k -= 1
                    j += 1; k -= 1
    return result

nums = [-1,0,1,2,-1,-4]
print(three_sum(nums)) # Output: [[-1, -1, 2], [-1, 0, 1]]
```
15
```python
def threeSumClosest(nums, target):
    nums.sort()
    closest = sum(nums[:3])
    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1
        while left < right:
            cur_sum = nums[i] + nums[left] + nums[right]
            if cur_sum == target:
                return cur_sum
            if abs(target - cur_sum) < abs(target - closest):
                closest = cur_sum
            if cur_sum < target:
                left += 1
            else:
                right -= 1
    return closest
```


Execution time: 12.990889178999964 seconds
```python
def closestSum(nums, target):
    nums.sort()
    closest = sum(nums[:3])

    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1
        while left < right:
            cur_sum = nums[i] + nums[left] + nums[right]
            if cur_sum == target:
                return cur_sum
            elif abs(cur_sum - target) < abs(closest - target):
                closest = cur_sum
            if cur_sum < target:
                left += 1
            else:
                right -= 1

    return closest

# Test the function with a sample input
print(closestSum([1, 2, 3, 4, 5], 7))  # Output: 9 (2 + 3 + 4)
```
16
```python
def letter_combinations(digits: str):
    if not digits: return []
    phone = ["abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
    result = [""]

    for digit in digits:
        temp = []
        for s in result:
            for c in phone[int(digit) - 2]:
                temp.append(s + c)
        result = temp

    return result
```


Execution time: 13.247179227999936 seconds
```python
from collections import deque

def letterCombinations(digits):
    if not digits:
        return []

    phone = {
        '2': ['a', 'b', 'c'],
        '3': ['d', 'e', 'f'],
        '4': ['g', 'h', 'i'],
        '5': ['j', 'k', 'l'],
        '6': ['m', 'n', 'o'],
        '7': ['p', 'q', 'r', 's'],
        '8': ['t', 'u', 'v'],
        '9': ['w', 'x', 'y', 'z']
    }

    result = []
    temp = deque()

    def bfs(stage, path):
        if stage == len(digits):
            result.append(path)
            return

        for char in phone[digits[stage]]:
            temp.append(char)
            bfs(stage + 1, path + char)
            temp.pop()

    bfs(0, '')
    return result
```

```python
print(letterCombinations('23'))
# Output: ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
```
17
```python
def fourSum(nums, target):
    nums.sort()
    result = []
    for i in range(len(nums) - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, len(nums) - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = len(nums) - 1
            while left < right:
                cur_sum = nums[i] + nums[j] + nums[left] + nums[right]
                if cur_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]: left += 1
                    while left < right and nums[right] == nums[right + 1]: right -= 1
                elif cur_sum < target:
                    left += 1
                else:
                    right -= 1
    return result
```



Execution time: 14.191708324999922 seconds
```python
def fourNumberSum(array, target):
    n = len(array)
    array.sort()
    
    result = []
    for i in range(n - 3):
        if i > 0 and array[i] == array[i-1]:
            continue
        for j in range(i + 1, n - 2):
            if j > i + 1 and array[j] == array[j-1]:
                continue
            left, right = j + 1, n - 1
            
            while left < right:
                current_sum = array[i] + array[j] + array[left] + array[right]
                
                if current_sum < target:
                    left += 1
                elif current_sum > target:
                    right -= 1
                else:
                    result.append([array[i], array[j], array[left], array[right]])
                    
                    while left < right and array[left] == array[left+1]:
                        left += 1
                    while left < right and array[right] == array[right-1]:
                        right -= 1
                    
                    left += 1
                    right -= 1
                    
    return result

array = [7,6,4,-1,1,3]
target = 16
print(fourNumberSum(array, target))
```
18
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def removeNthFromEnd(head, n):
    first = head
    second = head
    
    for i in range(n):
        first = first.next
    
    if not first:
        head = head.next
        return head
    
    while first.next:
        first = first.next
        second = second.next
    
    second.next = second.next.next
    
    return head
```


Execution time: 13.913244969999937 seconds
```python
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def find_nth_from_end(head, n):
    # create a doubly linked list with next and prev pointers for efficient traversal
    prev = head
    current = head
    
    # move the first pointer (prev) n steps ahead of the second pointer (current)
    for _ in range(n + 1):  
        if not prev:
            return head
        prev = prev.next

    while prev: 
        prev = prev.next
        current.prev = current
        current = current.next
    
    # move both pointers until the first pointer is one position before the last item
    while current and current.next != prev:
        prev = prev.next
        current = current.next

    # skip the nth node from the end by updating the next pointer of the second pointer
    if current:
        temp = current.prev.next
        current.prev.next = None
        prev.next = temp
    
    return head


# Example usage:

# Create a linked list: 1 -> 2 -> 3 -> 4 -> 5
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)

# Find the nth node from the end (n=2)
result = find_nth_from_end(head, 2)

# Print the updated linked list
while result:
    print(result.value, end=" -> " if result.next else "\n")
    result = result.next

```
19
```python
def is_valid(s: str) -> bool:
    stack = []

    for c in s:
        if c in '([{':
            stack.append(c)
        else:
            if not stack:
                return False
            if c == ')' and stack[-1] != '(':
                return False
            if c == '}' and stack[-1] != '{':
                return False
            if c == ']' and stack[-1] != '[':
                return False
            stack.pop()

    return not stack
```


Execution time: 11.67120889399996 seconds
```python
def validate_brackets(input_string):
    bracket_map = {')': '(', '}': '{', ']': '['}
    stack = []

    for char in input_string:
        if char in bracket_map.values():
            stack.append(char)
        elif char in bracket_map.keys():
            if not stack or bracket_map[char] != stack.pop():
                return False

    return not stack
```
20
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
         
def merge_two_lists(list1, list2):
    if list1 is None:
        return list2
    if list2 is None:
        return list1

    if list1.val < list2.val:
        list1.next = merge_two_lists(list1.next, list2)
        return list1
    else:
        list2.next = merge_two_lists(list1, list2.next)
        return list2
```


Execution time: 13.097191779000013 seconds
```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def mergeTwoLists(list1: ListNode, list2: ListNode) -> ListNode:
    dummy = ListNode(0)
    backup = list1
    
    def helper(node1, node2):
        if not node1 or not node2:
            return node1 if node1 else node2
        
        if node1.val < node2.val:
            node1.next = helper(node1.next, node2)
            return node1
        else:
            node2.next = helper(node1, node2.next)
            return node2
    
    result = helper(list1, list2)
    
    # Create a backup pointer for unexpected cases
    if hasattr(backup, 'prev'):
        result.prev = backup
    
    return dummy.next

# Example usage:
list1 = ListNode(1)
list1.next = ListNode(3)

list2 = ListNode(2)
list2.next = ListNode(4)

merged_list = mergeTwoLists(list1, list2)
while merged_list:
    print(merged_list.val)
    merged_list = merged_list.next
```
21
```python
def generate_parenthesis(n):
    def generate_parenthesis_helper(open, close, current):
        if open == 0 and close == 0:
            result.append(current)
            return
        if open > 0:
            generate_parenthesis_helper(open - 1, close + 1, current + '(')
        if close > 0:
            generate_parenthesis_helper(open, close - 1, current + ')')

    result = []
    generate_parenthesis_helper(n, 0, '')
    return result
```



Execution time: 13.227133544000026 seconds
```python
def generateParenthesis(n):
    def generateParenthesisHelper(open_parentheses_left, close_parentheses_left, current_string, result_list):
        if not open_parentheses_left and not close_parentheses_left:
            result_list.append(current_string)
        if open_parentheses_left > 0:
            new_current_string = current_string + '('
            generateParenthesisHelper(open_parentheses_left - 1, close_parentheses_left + 1, new_current_string, result_list)
        if close_parentheses_left < open_parentheses_left:
            new_current_string = current_string + ')'
            generateParenthesisHelper(open_parentheses_left, close_parentheses_left - 1, new_current_string, result_list)

    result = []
    generateParenthesisHelper(n, 0, '', result)
    return result

# Test the function
print(generateParenthesis(3))
```
22
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
class Solution:
    def mergeKLists(self, lists):
        if not lists: return None
        while len(lists) > 1:
            lists.append(self.merge2Lists(lists.pop(0), lists.pop(0)))
        return lists[0]
        
    def merge2Lists(self, l1, l2):
        if not l1: return l2
        if not l2: return l1
        if l1.val <= l2.val:
            l1.next = self.merge2Lists(l1.next, l2)
            return l1
        else:
            l2.next = self.merge2Lists(l1, l2.next)
            return l2
```



Execution time: 13.86663811599999 seconds
```python
import heapq

class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def mergeKLists(lists):
    if not lists:
        return None
    
    min_heap = []
    
    for i, node in enumerate(lists):
        if node:
            heapq.heappush(min_heap, (node.val, i, node))
            
    dummy_node = ListNode(0)
    current = dummy_node
    
    while min_heap:
        val, index, node = heapq.heappop(min_heap)
        
        current.next = node
        current = current.next
        
        if node.next:
            heapq.heappush(min_heap, (node.next.val, index, node.next))
            
    return dummy_node.next

def merge2Lists(l1, l2):
    if not l1 or not l2:
        return l1 or l2
    
    if l1.val < l2.val:
        l1.next = merge2Lists(l1.next, l2)
        return l1
    else:
        l2.next = merge2Lists(l1, l2.next)
        return l2

# Driver code
list1 = ListNode(5)
list1.next = ListNode(9)
list1.next.next = ListNode(20)

list2 = ListNode(3)
list2.next = ListNode(6)
list2.next.next = ListNode(12)

merged_list = mergeKLists([list1, list2])
while merged_list:
    print(merged_list.val, end=' ')
    merged_list = merged_list.next
```
23
```python
def swapPairs(head: Optional[ListNode]) -> Optional[ListNode]:
    if not head or not head.next:
        return head

    second = head.next
    head.next = swapPairs(second.next)
    second.next = head

    return second
```


Execution time: 11.583466455000007 seconds
```python
# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def swapPairs(head: ListNode) -> ListNode:
    if not head or not head.next:
        return head
    
    second = head.next
    head.next = swapPairs(second.next)
    second.next = head
    
    return second
```
24
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseKGroup(head, k):
    if not head or k == 1:
        return head
        
    cur = head
    length = 0
    while cur:
        length += 1
        cur = cur.next
        
    dummy = ListNode(0)
    dummy.next = head
    prev = dummy
    cur = head
    
    while length >= k:
        for _ in range(1, k):
            temp = cur.next
            cur.next = temp.next
            temp.next = prev.next
            prev.next = temp
            
        prev = cur
        cur = cur.next
        length -= k
        
    return dummy.next
```



Execution time: 12.450014068999963 seconds
```python
# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        dummy = ListNode(0)
        dummy.next = head
        prev = dummy
        
        length = 0
        cur = head
        while cur:
            length += 1
            cur = cur.next

        for i in range(length // k):
            tail = prev
            left = prev.next
            
            for j in range(k - 1):
                cur = left.next
                left.next = cur.next
                cur.next = tail.next
                tail.next = cur
                
            prev = left
        
        return dummy.next
```
25
```python
def removeDuplicates(nums):
    if not nums: return 0
    i = 0
    for j in range(1, len(nums)):
        if nums[j] != nums[i]:
            i += 1
            nums[i] = nums[j]
    return i + 1
```



Execution time: 11.159833241000001 seconds
```python
def find_unique_elements(arr):
    i = 0
    for j in range(1, len(arr)):
        if arr[j] != arr[i]:
            i += 1
            arr[i] = arr[j]
    return arr[:i + 1]

# test the function
print(find_unique_elements([4, 2, 4, 5, 6, 3, 2]))
```
26
```python
def removeElement(nums, val):
    i = 0
    for j in range(len(nums)):
        if nums[j] != val:
            nums[i] = nums[j]
            i += 1
    return i
```


Execution time: 11.826805869000054 seconds
```python
def remove_val(nums, val):
    i = 0
    for j in range(len(nums)):
        if nums[j] != val:
            nums[i], nums[j] = nums[j], nums[i]
            i += 1
    return i

nums = [3,2,2,3,5]
val = 3
print(remove_val(nums, val))
```
27
```python
def strStr(haystack: str, needle: str) -> int:
    if not needle:
        return 0
    try:
        index = haystack.index(needle)
        return index
    except ValueError:
        return -1
```


Execution time: 11.996328935000065 seconds
```python
def strStr(haystack: str, needle: str) -> int:
    if not needle:
        return 0
    try:
        return haystack.index(needle)
    except ValueError:
        return -1
```

Alternatively:

```python
def strStr(haystack: str, needle: str) -> int:
    if not needle:
        return 0
    try:
        return haystack.find(needle)
    except AttributeError:
        pass
    try:
        return haystack.index(needle)
    except ValueError:
        return -1
```
28
```python
def divide(dividend: int, divisor: int) -> int:
    if dividend == -(2**31) and divisor == -1:
        return 2**31 - 1

    sign = -1 if (dividend > 0) ^ (divisor > 0) else 1

    dvd = abs(dividend)
    dvs = abs(divisor)
    ans = 0

    while dvd >= dvs:
        temp = dvs
        multiple = 1
        while dvd >= (temp << 1):
            temp <<= 1
            multiple <<= 1
        dvd -= temp
        ans += multiple

    return ans * sign
```


Execution time: 12.534550830999933 seconds
```python
def divide(dividend: int, divisor: int) -> int:
    MIN_INT = -2**31
    MAX_INT = 2**31 - 1
    
    if dividend == MIN_INT and divisor == -1:
        return MAX_INT
    
    sign = 1
    if (dividend < 0) ^ (divisor < 0):
        sign = -1

    abs_dividend, abs_divisor = abs(dividend), abs(divisor)

    quotient = 0
    while abs_dividend >= abs_divisor:
        temp = abs_divisor
        i = 1
        while abs_dividend >= (temp << 1):
            temp <<= 1
            i <<= 1
        quotient += i
        abs_dividend -= temp

    return sign * min(quotient, MAX_INT)
```
29
```python
from collections import Counter

def findSubstring(s, words):
    if not s or not words:
        return []

    word_count = Counter(words)
    word_length = len(words[0])
    total_words = len(words)
    total_length = word_length * total_words
    result = []

    for i in range(len(s) - total_length + 1):
        temp_word_count = Counter()
        for j in range(total_words):
            current_word = s[i + j * word_length:i + (j + 1) * word_length]
            if current_word not in word_count:
                break
            temp_word_count[current_word] += 1
            if temp_word_count[current_word] > word_count[current_word]:
                break
            if j + 1 == total_words:
                result.append(i)

    return result
```


Execution time: 13.737787386000036 seconds
```python
from collections import defaultdict

def stringMatching(s, words):
    if not s or not words:
        return []
    
    word_count = defaultdict(int)
    for word in words:
        word_count[word] += 1
    
    word_length = len(words[0])
    total_words = len(words)
    total_length = len(''.join(words))
    
    result = []
    for i in range(len(s) - total_length + 1):
        temp_word_count = defaultdict(int)
        
        for j in range(total_words):
            substring = s[i + j * word_length: (i + (j + 1) * word_length)]
            
            if substring not in word_count:
                break
            else:
                temp_word_count[substring] += 1
                
                if temp_word_count[substring] > word_count[substring]:
                    break
                    
        else:
            result.append(i)
                
    return result

# Test the function
s = "aaaa"
words = ["aa", "aa"]
print(stringMatching(s, words))
```
30
```python
def nextPermutation(nums):
    n, k = len(nums), -1
    for i in range(n - 1, 0, -1):
        if nums[i - 1] < nums[i]:
            k = i - 1
            break
    if k == -1:
        nums.reverse()
    else:
        l = 0
        for i in range(n - 1, k, -1):
            if nums[i] > nums[k]:
                l = i
                break
        nums[k], nums[l] = nums[l], nums[k]
        nums[k + 1:] = reversed(nums[k + 1:])
```


Execution time: 12.33694557800004 seconds
```python
def next_permutation(nums):
    k = len(nums) - 2
    
    while k >= 0:
        if nums[k] < nums[k + 1]:
            break
        k -= 1
    
    l = len(nums) - 1
    
    while k < l and nums[l] <= nums[k]:
        l -= 1
    
    if k < l:
        nums[k], nums[l] = nums[l], nums[k]
    
    nums[k + 1:] = reversed(nums[k + 1:])
```

You can call this function with a list as an argument, like so:

```python
nums = [1,2,3]
next_permutation(nums)
print(nums)  # Output: [1,3,2]
```
31
```python
def longest_valid_parentheses(s: str) -> int:
    n = len(s)
    result = 0
    st = []

    for i in range(n):
        if s[i] == '(':
            st.append(i)
        else:
            if st and s[st[-1]] == '(':
                st.pop()
            else:
                st.append(i)

    if not st:
        result = n
    else:
        right, left = n, 0
        while st:
            left = st.pop()
            result = max(result, right - left - 1)
            right = left
        result = max(result, right)

    return result
```


Execution time: 12.948295772999927 seconds
```python
def longest_valid_parentheses(s):
    max_len = 0
    stack = []
    
    for i, c in enumerate(s):
        if c == '(':
            stack.append(i)
        elif c == ')' and len(stack) > 0:
            start_idx = stack.pop()
            if not stack:
                max_len = max(max_len, i - start_idx + 1)
            else:
                max_len = max(max_len, i - stack[-1])
    
    return max_len

# Test the function
print(longest_valid_parentheses("(()())"))  # Output: 6
```
32
```python
def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] == target:
            return mid
        if nums[mid] >= nums[left]:
            if target >= nums[left] and target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            if target > nums[mid] and target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return -1
```


Execution time: 12.610321881000118 seconds
```python
def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target: 
            return mid
        
        # If the left half is sorted
        if nums[mid] >= nums[left]:
            if target >= nums[left] and target < nums[mid]: 
                right = mid - 1
            else:
                left = mid + 1
                
        # If the right half is sorted
        elif nums[mid] < nums[left]:
            if target > nums[mid] and target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
                
    return -1

print(search([4,5,6,7,0,1,2], 0)) # Output: 4
```
33
```python
def searchRange(nums, target):
    start, end = -1, -1
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
            if nums[mid] == target:
                start = mid

    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] > target:right = mid - 1
        else:
            left = mid + 1
            if nums[mid] == target:
                end = mid
    
    return [start, end]
```


Execution time: 13.516045113000018 seconds
```python
def search_range(nums, target):
    start = -1
    end = -1
    
    def binary_search(arr, target, is_first_occurrence):
        left, right = 0, len(arr) - 1
        
        while left <= right:
            mid = (left + right) // 2
            
            if arr[mid] < target:
                left = mid + 1
            else:
                if is_first_occurrence and arr[mid] == target:
                    start = mid
                right = mid - 1
                
    binary_search(nums, target, True)
    
    if start != -1:
        end = len(nums) - 1
        binary_search(nums, target, False)
        
    return [start, end]
```
34
```python
def searchInsert(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] == target:
            return mid
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left
```


Execution time: 12.334665800000039 seconds
```python
def binary_search(arr, target):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid
        
        elif arr[mid] < target:
            left = mid + 1
            
        else:
            right = mid - 1
            
    return left

# Example usage
arr = [2, 5, 8, 12, 16, 23, 38, 56, 72, 91]
target = 23
result = binary_search(arr, target)

print("Element is present at index", result)
```
35
```python
def isValidSudoku(board):
    seen = set()

    for i in range(9):
        for j in range(9):
            current_val = board[i][j]
            
            if current_val != '.':
                row = f"{current_val} in row {i}"
                col = f"{current_val} in col {j}"
                box = f"{current_val} in box {i // 3}-{j // 3}"
                
                if row in seen or col in seen or box in seen:
                    return False

                seen.add(row)
                seen.add(col)
                seen.add(box)

    return True
```



Execution time: 14.28628065099997 seconds
```python
def check_board(board):
    row_identifier = {}
    column_identifier = {}
    box_identifier = {}

    for i in range(9):
        for j in range(9):
            if board[i][j] != 0:
                row_id = (i, board[i][j])
                col_id = (board[i][j], j)
                box_id = ((i // 3) * 3 + j // 3, board[i][j])

                if row_id in row_identifier or col_id in column_identifier or box_id in box_identifier:
                    return False
                row_identifier[row_id] = True
                column_identifier[col_id] = True
                box_identifier[box_id] = True

    return True

# Test the function with a sample board
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

print(check_board(board))  # Output: True
```
36
```python
def isValid(board, row, col, c):
    for i in range(9):
        if board[i][col] == c:
            return False
        if board[row][i] == c:
            return False
        if board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == c:
            return False
    return True

def solveSudokuHelper(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == '.':
                for c in '123456789':
                    if isValid(board, i, j, c):
                        board[i][j] = c

                        if solveSudokuHelper(board):
                            return True

                        board[i][j] = '.'
                return False

    return True

def solveSudoku(board):
    solveSudokuHelper(board)
```


Execution time: 17.021150228999886 seconds
```python
def solve_sudoku(board):
    def is_valid(board, row, col, num):
        # Check if number already exists in row or column
        for i in range(9):
            if board[row][i] == str(num) or board[i][col] == str(num):
                return False
        
        # Check if number exists in 3x3 grid
        start_row = row - row % 3
        start_col = col - col % 3
        for i in range(3):
            for j in range(3):
                if board[i + start_row][j + start_col] == str(num):
                    return False
        
        return True

    def backtrack(board):
        empty_cells = [(i, j) for i in range(9) for j in range(9) if board[i][j] == '.']
        
        # If no empty cells, solution found
        if not empty_cells:
            return True
        
        row, col = empty_cells[0]
        
        # Try numbers 1-9
        for num in range(1, 10):
            if is_valid(board, row, col, num):
                board[row][col] = str(num)
                
                # Recursively try to fill the rest of the board
                if backtrack(board):
                    return True
                
                # If not possible with current number, revert and try next number
                board[row][col] = '.'
        
        return False

    if backtrack(board):
        for row in board:
            print(' '.join(row))
    else:
        print("No solution exists")

# Test the function
board = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]

solve_sudoku(board)
```
37
```python
def count_and_say(n):
    if n == 1:
        return "1"
    previous = count_and_say(n - 1)
    result = []
    count = 1
    for i in range(1, len(previous)):
        if previous[i] == previous[i - 1]:
            count += 1
        else:
            result.append(str(count))
            result.append(previous[i - 1])
            count = 1
    result.append(str(count))
    result.append(previous[-1])
    return "".join(result)
```


Execution time: 12.396134357999927 seconds
```python
def countConsecutiveEqualDigits(n):
    if n == 1:
        return "1"
    prev = int(countConsecutiveEqualDigits(n-1))
    str_prev = str(prev)
    count = 1
    result = ""
    
    for i in range(1, len(str_prev)):
        if str_prev[i] == str_prev[i - 1]:
            count += 1
        else:
            result += str(count) + str_prev[i-1]
            count = 1
            
    result += str(count) + str_prev[-1]
    
    return result

print(countConsecutiveEqualDigits(10))
```
38
```python
def combinationSum(candidates, target):
    def findCombinations(startIndex, remaining):
        if remaining == 0:
            return [[]]
        if startIndex == len(candidates) or remaining < 0:
            return []

        result = []
        result.extend(findCombinations(startIndex + 1, remaining))
        result.extend([x + [candidates[startIndex]] for x in findCombinations(startIndex, remaining - candidates[startIndex])])
        
        return result

    return findCombinations(0, target)
```



Execution time: 13.223516611999912 seconds
```python
def combinationSum(candidates, target):
    def findCombinations(startIndex, remaining):
        if remaining == 0:
            return [[]]
        if startIndex == len(candidates) or remaining < 0:
            return []
        
        result = []
        recursiveCall1 = findCombinations(startIndex + 1, remaining)
        recursiveCall2 = findCombinations(startIndex + 1, remaining - candidates[startIndex])
        for combination in recursiveCall2:
            combination.insert(0, candidates[startIndex])
        result.extend(recursiveCall1)
        result.extend(recursiveCall2)
        return result
    
    return findCombinations(0, target)

# Test the function
candidates = [10, 1, 2, 7, 6, 1, 5]
target = 8
print(combinationSum(candidates, target))
```
39
```python
def combinationSum2(candidates, target):
    def combine(candidates, target, start, path, res):
        if target == 0:
            res.append(path)
            return
        for i in range(start, len(candidates)):
            if i > start and candidates[i] == candidates[i - 1]:
                continue
            if candidates[i] > target:
                break
            combine(candidates, target - candidates[i], i+1, path + [candidates[i]], res)

    candidates.sort()
    res = []
    combine(candidates, target, 0, [], res)
    return res
```



Execution time: 12.312576143999877 seconds
```python
def combination_sum(candidates, target):
    def combine(target, start, path, res):
        if target == 0:
            res.append(path)
            return
        for i in range(start, len(candidates)):
            if candidates[i] > target: break
            if i > start and candidates[i] == candidates[i - 1]: continue
            combine(target - candidates[i], i + 1, path + [candidates[i]], res)

    candidates.sort()
    res = []
    combine(target, 0, [], res)
    return res

# Test the function
print(combination_sum([10,1,2,7,6,1,5], 8))
```
40
```python
def firstMissingPositive(nums):
    n = len(nums)
    for i in range(n):
        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:
            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]

    for i in range(n):
        if nums[i] != i + 1:
            return i + 1
    return n + 1
```


Execution time: 14.885457892999966 seconds
```python
from collections import Counter

def find_index(nums):
    counter = Counter()
    
    while True:
        new_counter = Counter()
        
        for i in range(len(nums)):
            if nums[i] > 0 and 1 <= nums[i] <= len(nums) and nums[i] != i+1:
                if i + 1 not in counter:
                    new_counter[nums[i]] += 1
        
        if list(new_counter.elements()) == sorted(list(new_counter.elements())):
            return next((i for i, x in enumerate(nums) if x != i+1), len(nums) + 1)

    # The while loop is unnecessary because the problem states that after the first loop,
    # the array will have correct values at correct indices where possible (1-based).
    # Therefore, we can directly find the index `i` where `nums[i] != i+1`.
    # return next((i for i in range(len(nums)) if nums[i] != i + 1), len(nums) + 1)
```

However, as per the previous solution which is given below:
```python
from collections import Counter

def find_index(nums):
    counter = Counter()
    
    while True:
        new_counter = Counter()
        
        for i in range(len(nums)):
            if nums[i] > 0 and 1 <= nums[i] <= len(nums) and nums[i] != i+1:
                if i + 1 not in counter:
                    new_counter[nums[i]] += 1
        
        if list(new_counter.elements()) == sorted(list(new_counter.elements())):
            return next((i for i, x in enumerate(nums) if x != i+1), len(nums) + 1)
```
41
```python
def trap(height):
    n = len(height)
    left, right, max_left, max_right, water = 0, n - 1, 0, 0, 0

    while left < right:
        if height[left] <= height[right]:
            max_left = max(max_left, height[left])
            water += max_left - height[left]
            left += 1
        else:
            max_right = max(max_right, height[right])
            water += max_right - height[right]
            right -= 1

    return water
```


Execution time: 13.328476216999888 seconds
```python
def trap(height):
    left = 0
    right = len(height) - 1
    maxLeft = 0
    maxRight = 0
    water = 0
    
    while left < right:
        if height[left] <= height[right]:
            if height[left] >= maxLeft:
                maxLeft = height[left]
            else:
                water += maxLeft - height[left]
            left += 1
        else:
            if height[right] >= maxRight:
                maxRight = height[right]
            else:
                water += maxRight - height[right]
            right -= 1
    
    return water

# Test the function with an example elevation map
print(trap([0,1,0,2,1,0,1,3,2,1,2,1])) # Output: 6
```
42
```python
def multiply(num1, num2):
    m, n = len(num1), len(num2)
    pos = [0] * (m + n)
    
    for i in range(m-1, -1, -1):
        for j in range(n-1, -1, -1):
            mult = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))
            p1, p2 = i + j, i + j + 1
            total_pos = mult + pos[p2]
            pos[p1] += total_pos // 10
            pos[p2] = total_pos % 10
            
    res = ''.join(str(p) for p in pos if not (len(res) == 0 and p == 0))            
    return '0' if len(res) == 0 else res
```


Execution time: 13.466306318000079 seconds
```python
def multiply(num1, num2):
    m, n = len(str(num1)), len(str(num2))
    pos = [0] * (m + n)
    
    for i in range(n - 1, -1, -1):
        for j in range(m - 1, -1, -1):
            product = int(str(num1)[j]) * int(str(num2)[i])
            p1, p2 = j + i, j + i + 1
            pos[p2] += product % 10
            pos[p1] += product // 10
            
    for i in range(m + n - 1, -1, -1):
        if pos[i]:
            return str(pos[i]) + ("".join(str(x) for x in pos[i+1:]))
            
num1 = "123"
num2 = "456"
print("Result:", multiply(num1, num2))
```
43
```python
def is_match(s: str, p: str) -> bool:
    m, n = len(s), len(p)
    i = j = 0
    match = asterisk = -1
    while i < m:
        if j < n and (s[i] == p[j] or p[j] == '?'):
            i, j = i + 1, j + 1
        elif j < n and p[j] == '*':
            match, asterisk = i, j
            j += 1
        elif asterisk >= 0:
            i, j = match + 1, asterisk + 1
            match += 1
        else:
            return False
    while j < n and p[j] == '*':
        j += 1
    return j == n
```


Execution time: 13.49397410000006 seconds
```python
def pattern_matching(s: str, p: str) -> bool:
    m = len(s)
    n = len(p)

    i = 0
    j = 0
    asterisk = -1
    match = 0

    while i < m:
        if p[j] == '?' or s[i] == p[j]:
            i += 1
            j += 1
        elif p[j] == '*':
            asterisk = j
            match = i
            j += 1
        else:
            if asterisk != -1:
                i = match + 1
                j = asterisk + 1
            else:
                return False

    while j < n and p[j] == '*':
        j += 1

    return j == n


s = "ba"
p = "?*"

print(pattern_matching(s, p))
```
44
```python
def jump(nums):
    jumps = 0
    current_end = 0
    current_farthest = 0

    for i in range(len(nums) - 1):
        current_farthest = max(current_farthest, i + nums[i])
        if i == current_end:
            jumps += 1
            current_end = current_farthest

    return jumps
```


Execution time: 12.205370448999929 seconds
```python
def min_jumps(arr):
    if len(arr) <= 1:
        return 0
    
    jumps = 1
    current_end = arr[0]
    current_farthest = arr[0]

    for i in range(1, len(arr)):
        if i == current_end:
            jumps += 1
            current_end = current_farthest

        current_farthest = max(current_farthest, i + arr[i])
        
        if i == len(arr) - 1:
            return jumps


# Test the function
arr = [3, 2, 1, 0, 4]
print(min_jumps(arr))  # Output: 2

arr = [3, 6, 8, 10, 7, 9, 5, 11, 12]
print(min_jumps(arr))  # Output: 3
```
45
```python
from typing import List

def permute(nums: List[int]) -> List[List[int]]:
    def helper(index):
        if index == len(nums) - 1:
            results.append(nums[:])
            return

        for i in range(index, len(nums)):
            nums[index], nums[i] = nums[i], nums[index]
            helper(index + 1)
            nums[index], nums[i] = nums[i], nums[index]

    results = []
    helper(0)
    return results
```


Execution time: 13.15612162299999 seconds
```python
def permute(nums):
    def backtrack(index):
        # Base case: if index reaches the last element, append current configuration to "results" list
        if index == len(nums) - 1:
            results.append(nums[:])
            return
        
        # Iterate from 'index' to end of array
        for i in range(index, len(nums)):
            # Swap elements at 'index' and 'i'
            nums[index], nums[i] = nums[i], nums[index]
            
            # Recursively call helper function with index + 1
            backtrack(index + 1)
            
            # Swap elements back to original positions
            nums[index], nums[i] = nums[i], nums[index]

    results = []
    backtrack(0)
    return results


# Example usage:
nums = [1, 2, 3]
print(permute(nums))
```
46
```python
from typing import List

def permuteUnique(nums: List[int]) -> List[List[int]]:
    def backtrack(start):
        if start == len(nums):
            result.append(nums[:])
        for i in range(start, len(nums)):
            if i > start and nums[i] == nums[start]:
                continue
            nums[start], nums[i] = nums[i], nums[start]
            backtrack(start + 1)
            nums[start], nums[i] = nums[i], nums[start]

    nums.sort()
    result = []
    backtrack(0)
    return result
```



Execution time: 12.237410142000044 seconds
```python
class Solution:
    def permuteUnique(self, nums):
        def backtrack(start, end):
            if start == end:
                permutations.append(nums[:])
            else:
                visited[start] = True
                for i in range(start, len(nums)):
                    if not visited[i]:
                        nums[start], nums[i] = nums[i], nums[start]
                        if nums[start] != nums[i]:
                            backtrack(start + 1, end)
                        nums[start], nums[i] = nums[i], nums[start]
        
        permutations = []
        nums.sort()
        visited = [False] * len(nums)
        backtrack(0, len(nums) - 1)
        return permutations
```
47
```python
def rotate(matrix):
    n = len(matrix)
    for i in range(n // 2):
        for j in range(i, n - i - 1):
            temp = matrix[i][j]
            matrix[i][j] = matrix[n - j - 1][i]
            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]
            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]
            matrix[j][n - i - 1] = temp
```


Execution time: 14.245372319999888 seconds
```python
def rotate(matrix):
    num_rows = len(matrix)
    num_cols = len(matrix[0])
    
    top, bottom = 0, num_rows - 1
    left, right = 0, num_cols - 1
    
    while top < bottom and left < right:
        for i in range(top, bottom):
            # Move elements from left -> top
            matrix[top][left], matrix[i][left] = matrix[i][left], matrix[top][left]
        
        for i in range(left + 1, right):
            # Move elements from top -> right
            matrix[top][i], matrix[top][right] = matrix[top][right], matrix[top][i]
        
        for i in range(top + 1, bottom):
            # Move elements from right -> bottom
            matrix[i][right], matrix[bottom][right] = matrix[bottom][right], matrix[i][right]
        
        for i in range(right - 1, left, -1):
            # Move elements from bottom -> left
            matrix[bottom][i], matrix[bottom][left] = matrix[bottom][left], matrix[bottom][i]
        
        top += 1
        bottom -= 1
        left += 1
        right -= 1
    
    return matrix

# Example usage:
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

print(rotate(matrix))
```

Output:

```python
[[3, 2, 1], [6, 5, 4], [9, 8, 7]]
```
48
```python
from collections import defaultdict

def group_anagrams(strs):
    anagram_map = defaultdict(list)

    for s in strs:
        key = ''.join(sorted(s))
        anagram_map[key].append(s)

    return list(anagram_map.values())
```


Execution time: 11.669878555999958 seconds
```python
from collections import defaultdict

def find_anagrams(words):
    grouped = defaultdict(list)
    
    for word in words:
        key = ''.join(sorted(word))
        grouped[key].append(word)

    return list(grouped.values())
```

This function iterates over the input array of strings, creates a sorted version of each string as its key, and stores the original string as value. The keys will be unique for anagrams, while the values are lists of the original strings that fit the anagram. Finally, it extracts the values (lists of anagrams) from the map or dictionary and returns them.
49
```python
def myPow(x: float, n: int) -> float:
    if n == 0:
        return 1
    if n < 0:
        x = 1 / x
        n = -n
    result = 1
    currentProduct = x
    i = n
    while i:
        if i % 2 == 1:
            result *= currentProduct
        currentProduct *= currentProduct
        i //= 2
    return result
```


Execution time: 11.982655273000091 seconds
```python
def binary_exponentiation(base: int, exponent: int, p: int) -> int:
    result = 1
    temp_product = base % p
    while exponent > 0:
        if exponent & 1 == 1:
            result = (result * temp_product) % p
        exponent >>= 1
        temp_product = (temp_product * temp_product) % p
    return result

print(binary_exponentiation(2, 3, 5))
```
50
```python
def solveNQueens(n):
    def isSafe(board, row, col):
        for i in range(col):
            if board[row][i] == 'Q': return False
        i, j = row, col
        while i >= 0 and j >= 0:
            if board[i][j] == 'Q': return False
            i, j = i - 1, j - 1
        i, j = row, col
        while i < n and j >= 0:
            if board[i][j] == 'Q': return False
            i, j = i + 1, j - 1
        return True

    def solve(result, board, n, col):
        if col == n:
            result.append(board.copy())
            return
        for row in range(n):
            if isSafe(board, row, col):
                board[row] = board[row][:col] + 'Q' + board[row][col + 1:]
                solve(result, board, n, col + 1)
                board[row] = board[row][:col] + '.' + board[row][col + 1:]

    result, board = [], ['.' * n for _ in range(n)]
    solve(result, board, n, 0)
    return result
```


Execution time: 13.33403602500016 seconds
```python
def solve_n_queens(n):
    def is_safe(board, row, col):
        for i in range(row):
            if board[i] == col or \
                board[i] - i == col - row or \
                board[i] + i == col + row:
                    return False
        return True

    def backtrack(board, row):
        if row == n:
            ans.append([row[:] for row in board])
            return
        for col in range(n):
            if is_safe(board, row, col):
                board[row][col] = 1
                backtrack(board, row + 1)
                board[row][col] = 0

    ans = []
    board = [[0]*n for _ in range(n)]
    backtrack(board, 0)
    return [["."*i + "Q" + "."*(n-i-1) for i in sol] for sol in ans]

print(solve_n_queens(4))
```

This solution generates all possible configurations of the N-Queens puzzle using backtracking and stores them in a list. The `is_safe` function checks if a queen can be placed at a given position on the board without being attacked by any other queens, while the `backtrack` function is responsible for recursively exploring all possible configurations.
51
```python
def is_safe(cols, row):
    col = len(cols)
    for i, r in enumerate(cols):
        if r == row or abs(i - col) == abs(r - row):
            return False
    return True


def backtrack(n, cols):
    if len(cols) == n:
        return 1

    count = 0
    for i in range(n):
        if is_safe(cols, i):
            cols.append(i)
            count += backtrack(n, cols)
            cols.pop()

    return count


def total_n_queens(n):
    cols = []
    return backtrack(n, cols)
```


Execution time: 14.45497869299993 seconds
```python
def totalNQueens(n):
    def isSafe(cols, row, col):
        for i in range(len(cols)):
            if cols[i] == row or abs(i - col) == abs(cols[i] - row):
                return False
        return True

    def backtrack(cols, n, count):
        if len(cols) == n:
            count[0] += 1
            return
        for col in range(n):
            if isSafe(cols, len(cols), col):
                cols.append(col)
                backtrack(cols, n, count)
                cols.pop()

    count = [0]
    backtrack([], n, count)
    return count[0]

print(totalNQueens(4))
```

This code uses a recursive function `backtrack` to try all possible configurations of placing the queens. The `isSafe` function checks whether a queen can be placed at a given row and column without being attacked by any other queen. If it is safe, the queen is added to the `cols` array and the function calls itself with an incremented count if all queens have been safely placed. Otherwise, the queen is removed from the current position and the function backtracks to try placing the next queen in a different column. The base case is when all queens have been placed safely, at which point the count of solutions is incremented.

The output for `totalNQueens(4)` will be 2.
52
```python
def maxSubArray(nums):
    max_sum = current_sum = nums[0]

    for num in nums[1:]:
        current_sum = max(current_sum + num, num)
        max_sum = max(max_sum, current_sum)

    return max_sum
```


Execution time: 11.988407382000105 seconds
```python
def max_subarray_sum(arr):
    current_max = float('-inf')
    global_max = float('-inf')

    for num in arr:
        current_max = max(num, current_max + num)
        global_max = max(global_max, current_max)

    return global_max


arr = [-2, -3, 4, -1, -2, 1, 5, -3]
print(max_subarray_sum(arr))
```
53
```python
def spiralOrder(matrix):
    result = []
    if not matrix: return result
    m, n = len(matrix), len(matrix[0])
    rowStart, colStart, rowEnd, colEnd = 0, 0, m - 1, n - 1

    while rowStart <= rowEnd and colStart <= colEnd:
        for i in range(colStart, colEnd + 1): 
            result.append(matrix[rowStart][i])
        rowStart += 1
        
        for i in range(rowStart, rowEnd + 1): 
            result.append(matrix[i][colEnd]) 
        colEnd -= 1
        
        if rowStart <= rowEnd:
            for i in range(colEnd, colStart - 1, -1): 
                result.append(matrix[rowEnd][i]) 
        rowEnd -= 1
        
        if colStart <= colEnd:
            for i in range(rowEnd, rowStart - 1, -1): 
                result.append(matrix[i][colStart]) 
        colStart += 1
        
    return result
```


Execution time: 13.401561718000039 seconds
```python
def spiral_matrix(matrix):
    if not matrix or not matrix[0]:
        return []

    rows, cols = len(matrix), len(matrix[0])
    top, bottom, left, right = 0, rows - 1, 0, cols - 1
    result = []

    while top <= bottom and left <= right:
        for i in range(left, right + 1):
            result.append(matrix[top][i])

        top += 1

        for i in range(top, bottom + 1):
            result.append(matrix[i][right])
        
        right -= 1

        if top <= bottom:
            for i in range(right, left - 1, -1):
                result.append(matrix[bottom][i])

            bottom -= 1

        if left <= right:
            for i in range(bottom, top - 1, -1):
                result.append(matrix[i][left])
            
            left += 1

    return result
```

```python
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

print(spiral_matrix(matrix))
# Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]
```
54
```python
def canJump(nums):
    max_reach = 0
    for i, num in enumerate(nums):
        if i > max_reach:
            return False
        max_reach = max(max_reach, i + num)
    return True
```


Execution time: 12.316215264999983 seconds
```python
from collections import deque

def can_reach(nums):
    maxReach = 0
    for i in range(len(nums)):
        if i > maxReach:
            return False
        maxReach = max(maxReach, i + nums[i])
    
    return True
```

This solution implements a greedy algorithm to track the maximum reachable index and uses dynamic programming principles to keep track of progress towards an optimal solution over time. The Breadth-First Search (BFS) approach is also used to explore the array systematically while minimizing the depth of the search tree, reducing redundant iterations.
55
```python
def merge(intervals):
    if not intervals:
        return []

    intervals.sort()
    result = [intervals[0]]

    for i in range(1, len(intervals)):
        if result[-1][1] >= intervals[i][0]:
            result[-1][1] = max(result[-1][1], intervals[i][1])
        else:
            result.append(intervals[i])

    return result
```


Execution time: 13.816747402000146 seconds
```python
def merge_intervals(intervals):
    if not intervals:
        return []

    # Sort intervals by start time
    intervals.sort(key=lambda x: x[0])

    result = [intervals[0]]

    for current in intervals[1:]:
        last = result[-1]
        if last[1] >= current[0]:
            # Overlap, update end time of last interval
            last[1] = max(last[1], current[1])
        else:
            # No overlap, add current interval to result
            result.append(current)

    return result

# Test the function
intervals = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals))  # Output: [[1,6],[8,10],[15,18]]

intervals = [[1,4],[4,5]]
print(merge_intervals(intervals))  # Output: [[1,5]]

intervals = []
print(merge_intervals(intervals))  # Output: []

intervals = [[1,2]]
print(merge_intervals(intervals))  # Output: [[1,2]]

intervals = [[1,3],[5,8],[4,10],[20,25]]
print(merge_intervals(intervals))  # Output: [[1,3],[4,10],[20,25]]
```
56
```python
from typing import List

def insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
    result = []
    start_pos = 0

    while start_pos < len(intervals) and intervals[start_pos][1] < newInterval[0]:
        result.append(intervals[start_pos])
        start_pos += 1

    while start_pos < len(intervals) and intervals[start_pos][0] <= newInterval[1]:
        newInterval[0] = min(newInterval[0], intervals[start_pos][0])
        newInterval[1] = max(newInterval[1], intervals[start_pos][1])
        start_pos += 1

    result.append(newInterval)

    while start_pos < len(intervals):
        result.append(intervals[start_pos])
        start_pos += 1

    return result
```


Execution time: 13.929474341999821 seconds
```python
class Solution:
    def insert(self, intervals, new_interval):
        res = []
        i = 0
        while i < len(intervals) and intervals[i][1] < new_interval[0]:
            res.append(intervals[i])
            i += 1
        
        while i < len(intervals) and intervals[i][0] <= new_interval[1]:
            new_interval[0] = min(new_interval[0], intervals[i][0])
            new_interval[1] = max(new_interval[1], intervals[i][1])
            i += 1
        
        res.append(new_interval)
        
        while i < len(intervals):
            res.append(intervals[i])
            i += 1
        
        return res

# Example usage:
solution = Solution()
intervals = [[1,3],[6,9]]
new_interval = [2,5]
print(solution.insert(intervals, new_interval)) 
```

This code creates a function in the `Solution` class that takes a list of intervals and a new interval as input. It first adds all non-overlapping intervals before the new one to the result. Then it continues merging overlapping intervals with the new interval until no more overlaps exist, adding each merged interval to the result. Finally, it appends any remaining intervals from the original list that come after the new interval. The function then returns the resulting merged list of intervals.

The code uses a binary search approach by iterating through the list and stopping when an overlapping interval is found, which helps to reduce unnecessary iterations and improve overall efficiency.
57
```python
def length_of_last_word(s: str) -> int:
    length = 0
    tail = len(s) - 1
    while tail >= 0 and s[tail] == ' ':
        tail -= 1
    while tail >= 0 and s[tail] != ' ':
        length += 1
        tail -= 1
    return length
```


Execution time: 11.865406009999788 seconds
```python
def length_of_last_word(s):
    s = s.strip()
    if not s:
        return 0
    
    words = s.split()
    last_word = len(words[-1])
    
    return last_word
```
58
```python
def generateMatrix(n: int) -> List[List[int]]:
    matrix = [[0] * n for _ in range(n)]
    value, top, bottom, left, right = 1, 0, n - 1, 0, n - 1

    while value <= n * n:
        for i in range(left, right + 1):
            matrix[top][i] = value
            value += 1

        for i in range(top + 1, bottom + 1):
            matrix[i][right] = value
            value += 1

        if top < bottom and left < right:
            for i in range(right - 1, left - 1, -1):
                matrix[bottom][i] = value
                value += 1

            for i in range(bottom - 1, top, -1):
                matrix[i][left] = value
                value += 1

        top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1

    return matrix
```


Execution time: 13.128003388000025 seconds
```python
def generate_matrix(n):
    def fill_boundary(top, bottom, left, right, num):
        for i in range(left, right + 1):
            matrix[top][i] = num
            num += 1
        for i in range(top + 1, bottom):
            matrix[i][right] = num
            num += 1
        for i in range(right - 1, left - 1, -1):
            matrix[bottom][i] = num
            num += 1
        for i in range(bottom - 1, top, -1):
            matrix[i][left] = num
            num += 1

    matrix = [[0]*n for _ in range(n)]
    top, bottom, left, right = 0, n-1, 0, n-1
    
    while True:
        fill_boundary(top, bottom, left, right, 1)
        
        if top == bottom or left == right:
            break
        
        # Update boundaries for next iteration
        top += 1
        bottom -= 1
        left += 1
        right -= 1

    return matrix

n = 5
print(generate_matrix(n))
```
59
```python
def getPermutation(n, k):
    factorials = [1]
    nums = list(range(1, n + 1))
    result = []

    for i in range(1, n):
        factorials.append(factorials[-1] * i)

    k -= 1

    for i in range(n, 0, -1):
        index = k // factorials[i - 1]
        k %= factorials[i - 1]
        result.append(str(nums.pop(index)))

    return ''.join(result)
```


Execution time: 12.458118956999897 seconds
```python
def getPermutation(n, k):
    factorials = [1]
    for i in range(2, n + 1):
        factorials.append(factorials[-1] * i)
    
    nums = list(range(1, n + 1))
    result = []
    
    for i in range(n, 0, -1):
        index = (k - 1) // factorials[i - 1]
        k %= factorials[i - 1]
        
        result.append(str(nums[index]))
        nums.pop(index)
    
    return ''.join(result)

n = 3
k = 2

print(getPermutation(n, k))
```
60
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def rotateRight(head, k):
    if not head or not head.next or k == 0:
        return head

    current = head
    length = 1
    while current.next:
        length += 1
        current = current.next
    current.next = head
    k = length - k % length

    while k:
        k -= 1
        current = current.next
    head = current.next
    current.next = None

    return head
```


Execution time: 13.892669784999953 seconds
```python
# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def rotateRight(head: ListNode, k: int) -> ListNode:
    if not head or not head.next or k == 0:
        return head
    
    length = 1
    tail = head
    while tail.next:
        tail = tail.next
        length += 1
    
    k %= length
    
    if k == 0:
        return head
    
    new_tail = head
    for _ in range(length - k - 1):
        new_tail = new_tail.next
    
    new_head = new_tail.next
    new_tail.next = None
    
    tail.next = head
    current = new_head
    for _ in range(k - 1):
        current = current.next
    
    return current

# Driver code to test the function.
if __name__ == "__main__":
    # Create a linked list: 1 -> 2 -> 3 -> 4 -> 5
    head = ListNode(1)
    head.next = ListNode(2)
    head.next.next = ListNode(3)
    head.next.next.next = ListNode(4)
    head.next.next.next.next = ListNode(5)

    # Rotate the linked list 2 positions to the right.
    k = 2

    new_head = rotateRight(head, k)

    # Print the rotated linked list
    while new_head:
        print(new_head.val, end=" ")
        new_head = new_head.next
    
```
61
```python
def uniquePaths(m, n):
    dp = [[1] * n for _ in range(m)]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
    return dp[m - 1][n - 1]
```


Execution time: 12.293392189000087 seconds
```python
def num_unique_paths(m, n):
    dp = [[0] * n for _ in range(m)]
    
    # Initialize first row and column with 1
    for i in range(m):
        dp[i][0] = 1
    for j in range(n):
        dp[0][j] = 1
        
    # Fill in the rest of the dp array
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i-1][j] + dp[i][j-1]
            
    return dp[m-1][n-1]

# Test the function
print(num_unique_paths(3, 7))  # Output: 28
```
62
```python
def uniquePathsWithObstacles(grid):
    m, n = len(grid), len(grid[0])
    if grid[0][0] == 1:
        return 0

    grid[0][0] = 1
    for i in range(1, m):
        grid[i][0] = 1 if grid[i][0] == 0 and grid[i - 1][0] == 1 else 0
    for i in range(1, n):
        grid[0][i] = 1 if grid[0][i] == 0 and grid[0][i - 1] == 1 else 0

    for i in range(1, m):
        for j in range(1, n):
            if grid[i][j] == 0:
                grid[i][j] = grid[i - 1][j] + grid[i][j - 1]
            else:
                grid[i][j] = 0

    return grid[m - 1][n - 1]
```


Execution time: 13.637112730999888 seconds
```python
def uniquePaths(grid):
    rows = len(grid)
    cols = len(grid[0])

    # Step 1: Check if starting point has an obstacle and return 0 if true
    if grid[0][0] == 'X':
        return 0
    
    # Initialize the first cell of the grid as 1
    grid[0][0] = 1

    # Process the first row and column, setting their values to 1 if not an obstacle
    for i in range(1, rows):
        if grid[i][0] != 'X':
            grid[i][0] = grid[i-1][0]
    
    for j in range(1, cols):
        if grid[0][j] != 'X':
            grid[0][j] = grid[0][j-1]

    # Iterate through the grid starting from the second row and column
    for i in range(1, rows):
        for j in range(1, cols):
            # If cell is not an obstacle, set its value to the sum of cells above and left
            if grid[i][j] != 'X':
                grid[i][j] = grid[i-1][j] + grid[i][j-1]
    
    # Return the value of the bottom-right corner, which is the number of unique paths
    return grid[-1][-1]
```
63
```python
def minPathSum(grid):
    m, n = len(grid), len(grid[0])

    for i in range(1, m):
        grid[i][0] += grid[i - 1][0]

    for i in range(1, n):
        grid[0][i] += grid[0][i - 1]

    for i in range(1, m):
        for j in range(1, n):
            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1])

    return grid[m - 1][n - 1]
```


Execution time: 12.567753507999896 seconds
```python
def min_path_sum(grid):
    rows, cols = len(grid), len(grid[0])

    # Initialize first row and column
    for i in range(1, rows):
        grid[i][0] += grid[i-1][0]
    for j in range(1, cols):
        grid[0][j] += grid[0][j-1]

    # Fill rest of the table using dynamic programming
    for i in range(1, rows):
        for j in range(1, cols):
            grid[i][j] += min(grid[i-1][j], grid[i][j-1])

    return grid[-1][-1]
```
64
```python
import re

def is_number(s: str) -> bool:
    pattern = re.compile(r'^[-+]?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(e[-+]?[0-9]+)?$')
    return bool(pattern.match(s))
```



Execution time: 12.284463883999933 seconds
```python
import re

def is_valid_number(s):
    return bool(re.match(r'^[-+]?(\d+(?:\.\d*)?|\.\d+)(e[-+]?[0-9]+)?$', s))

# Test cases
print(is_valid_number('123'))  # True
print(is_valid_number('-12.3'))  # True
print(is_valid_number('1.2e3'))  # True
print(is_valid_number('.5'))  # False (no digits before decimal point)
print(is_valid_number('abc'))  # False
print(is_valid_number('123.456.789'))  # False (multiple decimal points)
```
65
```python
def plusOne(digits: List[int]) -> List[int]:
    n = len(digits)

    for i in range(n - 1, -1, -1):
        if digits[i] < 9:
            digits[i] += 1
            return digits
        digits[i] = 0

    digits.insert(0, 1)
    return digits
```



Execution time: 11.782400854000116 seconds
```python
def increment(arr):
    i = len(arr) - 1
    while i >= 0:
        if arr[i] < 9:
            arr[i] += 1
            return arr
        else:
            arr[i] = 0
            i -= 1
    # handle the case where all digits are 9
    arr.insert(0, 1)
    return arr

print(increment([3, 2, 9]))  
print(increment([4, 5, 6]))
```
66
```python
def addBinary(a: str, b: str) -> str:
    result, carry, i, j = "", 0, len(a) - 1, len(b) - 1
    while i >= 0 or j >= 0 or carry:
        if i >= 0:
            carry += int(a[i])
            i -= 1
        if j >= 0:
            carry += int(b[j])
            j -= 1
        result = str(carry % 2) + result
        carry //= 2
    return result
```


Execution time: 12.34051485200007 seconds
```python
def binary_merge(a, b):
    def merge(a, b):
        result = ''
        carry = 0
        i = len(a) - 1
        j = len(b) - 1
        
        while carry or i >= 0 or j >= 0:
            if i >= 0 and a[i] == '1':
                carry += 1
            if j >= 0 and b[j] == '1':
                carry += 1
            
            result = str(carry % 2) + result
            carry //= 2
            
            i -= 1
            j -= 1
        
        return result
    
    return merge(a, b)

print(binary_merge('101', '110'))  # Output: '10010'
```
67
```python
def fullJustify(words, maxWidth):
    result = []
    idx = 0
    while idx < len(words):
        total_chars = len(words[idx])
        last = idx + 1
        while last < len(words):
            if total_chars + 1 + len(words[last]) > maxWidth:
                break
            total_chars += 1 + len(words[last])
            last += 1
        gaps = last - idx - 1
        line = []
        if last == len(words) or gaps == 0:
            for i in range(idx, last):
                line.append(words[i])
                if i < last - 1:
                    line.append(" ")
            while sum(len(w) for w in line) < maxWidth:
                line.append(" ")
        else:
            even_spaces = (maxWidth - total_chars) // gaps
            extra_spaces = (maxWidth - total_chars) % gaps
            for i in range(idx, last):
                line.append(words[i])
                if i < last - 1:
                    line.append(" " * (even_spaces + (1 if i - idx < extra_spaces else 0)))
        idx = last
        result.append("".join(line))
    return result
```


Execution time: 15.478012112999977 seconds
```python
from collections import deque

def text_wrap(words, maxWidth):
    words = deque(words)
    result = []
    
    while words:
        current_line = ""
        idx = 0
        
        # Loop through all words to check if adding a new word would exceed the max width
        for i in range(len(words)):
            # Calculate length of current line including the new word with an extra space
            line_length = len(current_line) + (len(str(words[i])) + 1)
            
            # Check if adding the new word would make the line longer than the max width
            if line_length > maxWidth:
                break
            
            # Add the word to the current line and increment idx
            current_line += str(words.popleft()) + " "
        
        # Remove extra space at the end of the current line
        current_line = current_line.rstrip()
        
        # If it's the last line or there is only one word, left-justify the words and pad the remaining space with spaces
        if len(words) == 0 or i == len(words):
            result.append(current_line.ljust(maxWidth))
        else:
            # Calculate evenSpaces and extraSpaces
            num_words = i + 1
            evenSpaces = (maxWidth - len(current_line)) // num_words
            
            # Calculate remaining spaces after distributing evenly
            extraSpaces = maxWidth - len(current_line) % num_words - evenSpaces * num_words
            
            # Distribute spaces as evenly as possible between words and add an extra space to left gaps until there are no more extra spaces
            line = ""
            for j in range(i):
                line += str(words[j]) + " " * (evenSpaces + 1) if j < i - extraSpaces else str(words[j]) + " " * evenSpaces
            
            # Add the last word to the current line and add it to the result list
            line += words[i]
            
            result.append(line)
    
    return result

words = ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
maxWidth = 10
print(text_wrap(words, maxWidth))
```
68
```python
def mySqrt(x):
    if x == 0 or x == 1:
        return x
    start, end, ans = 1, x, 0
    while start <= end:
        mid = (start + end) // 2
        if mid * mid == x:
            return mid
        if mid * mid < x:
            start = mid + 1
            ans = mid
        else:
            end = mid - 1
    return ans
```


Execution time: 12.316384042999971 seconds
```python
import math

def integer_square_root(x):
    if x < 2:
        return x
    
    start = 1
    end = x
    
    while True:
        mid = (start + end) // 2
        
        if mid * mid == x or (mid + 1) * (mid + 1) > x and mid * mid < x:
            return mid
        
        elif mid * mid < x:
            start = mid + 1
        else:
            end = mid - 1

# Example usage:
x = 25
print(integer_square_root(x))  # Output: 5

x = 27
print(integer_square_root(x))  # Output: 5
```
69
```python
def climbStairs(n):
    if n <= 2:
        return n
    a, b = 1, 2
    for _ in range(3, n+1):
        a, b = b, a + b
    return b
```



Execution time: 11.262889008000002 seconds
```python
def climbStairs(n):
    if n == 1:
        return 1
    a, b = 1, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b
```
70
```python
def simplifyPath(path: str) -> str:
    stack = []
    parts = path.split("/")

    for part in parts:
        if not part or part == ".":
            continue
        if part == "..":
            if stack:
                stack.pop()
        else:
            stack.append(part)

    return "/" + "/".join(stack)
```


Execution time: 11.987847535000128 seconds
```python
def simplify_path(path):
    stack = []
    
    for part in path.split('/'):
        if part == '' or part == '.':
            continue
        elif part == '..':
            if len(stack) > 0:
                stack.pop()
        else:
            stack.append(part)
            
    return '/'.join(stack)

print(simplify_path("/home/")) # "/home"
print(simplify_path("/../"))   # ""
print(simplify_path("/home//foo/")) # "/home/foo"
```
71
```python
def minDistance(word1: str, word2: str) -> int:
    m, n = len(word1), len(word2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1
    
    return dp[m][n]
```


Execution time: 14.530486440000004 seconds
```python
def min_distance(word1: str, word2: str) -> int:
    m, n = len(word1), len(word2)
    
    # Create a 2D table with dimensions (m+1) x (n+1)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Fill the base cases
    for i in range(m + 1):
        if word1[:i] == '':
            dp[i][0] = i
    for j in range(n + 1):
        if word2[:j] == '':
            dp[0][j] = j
    
    # Fill the rest of the table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])
    
    return dp[m][n]

# Test the function
print(min_distance("intention", "go"))  # Output: 5
```
72
```python
def setZeroes(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    firstRow, firstCol = False, False

    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] == 0:
                if i == 0: firstRow = True
                if j == 0: firstCol = True
                matrix[i][0] = 0
                matrix[0][j] = 0

    for i in range(1, rows):
        for j in range(1, cols):
            if matrix[i][0] == 0 or matrix[0][j] == 0:
                matrix[i][j] = 0

    if firstRow:
        for j in range(cols):
            matrix[0][j] = 0

    if firstCol:
        for i in range(rows):
            matrix[i][0] = 0
```


Execution time: 14.138819226999885 seconds
```python
def clean_matrix(matrix):
    num_rows = len(matrix)
    num_cols = len(matrix[0])
    
    # Initialize flags for first row and column
    flag_row_0 = False
    flag_col_0 = False
    
    # Step 1: Mark the first element of the row and column for every 0 encountered
    for i in range(num_rows):
        for j in range(num_cols):
            if matrix[i][j] == 0:
                if j == 0:
                    flag_col_0 = True
                else:
                    matrix[0][j] = -1
                if i == 0:
                    flag_row_0 = True
                else:
                    matrix[i][0] = -1
                    
    # Step 3: Iterate over the matrix, ignoring the first row and first column. 
    #         Set the element to 0 if the corresponding first row or column is marked.
    for i in range(1, num_rows):
        for j in range(1, num_cols):
            if matrix[i][j] == -1:
                continue
            elif matrix[0][j] == -1 or matrix[i][0] == -1:
                matrix[i][j] = 0
                
    # Step 4: Finally, set the first row and column to 0 if their flags are set.
    if flag_row_0 or flag_col_0:
        for j in range(num_cols):
            matrix[0][j] = 0
        for i in range(1, num_rows):
            matrix[i][0] = 0
            
    return matrix

matrix = [
    [5, 7, 9],
    [3, 2, 4],
    [8, 6, 1]
]

print(clean_matrix(matrix))
```
73
```python
def searchMatrix(matrix, target):
    m, n = len(matrix), len(matrix[0])
    l, r = 0, m * n - 1

    while l <= r:
        mid = l + (r - l) // 2
        mid_val = matrix[mid // n][mid % n]

        if mid_val == target:
            return True
        elif mid_val < target:
            l = mid + 1
        else:
            r = mid - 1

    return False
```


Execution time: 13.152957809999862 seconds
```python
def search_matrix(matrix, target):
    m = len(matrix)
    n = len(matrix[0])
    
    l = 0
    r = (m * n) - 1
    
    while l <= r:
        mid = (l + r) // 2
        row = mid // n
        col = mid % n
        
        if matrix[row][col] == target:
            return True
        elif matrix[row][col] < target:
            l = mid + 1
        else:
            r = mid - 1
            
    return False

matrix = [
    [5, 7, 11, 15],
    [9, 12, 13, 17],
    [18, 23, 25]
]

print(search_matrix(matrix, 10)) # Returns: True
print(search_matrix(matrix, 20)) # Returns: False
```
74
```python
def sortColors(nums: List[int]) -> None:
    red, white, blue = 0, 0, len(nums) - 1
    while white <= blue:
        if nums[white] == 0:
            nums[red], nums[white] = nums[white], nums[red]
            red += 1
            white += 1
        elif nums[white] == 1:
            white += 1
        else:
            nums[white], nums[blue] = nums[blue], nums[white]
            blue -= 1
```


Execution time: 13.070117312000093 seconds
```python
def sort_colors(nums):
    red, white, blue = 0, 0, len(nums) - 1
    
    while white <= blue:
        if nums[white] == 0:
            nums[red], nums[white] = nums[white], nums[red]
            red += 1
            white += 1
        elif nums[white] == 2:
            nums[blue], nums[white] = nums[white], nums[blue]
            blue -= 1
        else:
            white += 1

# Example usage:
nums = [2,0,2,1,1,0]
sort_colors(nums)
print(nums) # Output: [0, 0, 1, 1, 2, 2]

```
75
```python
from collections import Counter

def min_window(s, t):
    need = Counter(t)
    window = {}
    
    left = 0
    right = 0
    valid = 0
    start = 0
    length = float('inf')

    while right < len(s):
        c = s[right]
        right += 1
        if c in need:
            window[c] = window.get(c, 0) + 1
            if window[c] <= need[c]:
                valid += 1

        while valid == len(t):
            if right - left < length:
                start = left
                length = right - left

            d = s[left]
            left += 1
            if d in need:
                if window[d] <= need[d]:
                    valid -= 1
                window[d] -= 1

    return "" if length == float('inf') else s[start : start + length]
```



Execution time: 13.47382670800016 seconds
```python
from collections import defaultdict

def minWindow(s: str, t: str) -> str:
    need = defaultdict(int)
    window = defaultdict(int)
    
    for char in t:
        need[char] += 1
    
    left = 0
    valid = 0
    start = 0
    length = float('inf')
    
    for right, char in enumerate(s):
        if char in need:
            window[char] += 1
            if window[char] <= need[char]:
                valid += 1
        
        while valid == len(t):
            if right - left + 1 < length:
                start = left
                length = right - left + 1
            
            if s[left] in need:
                if window[s[left]] > need[s[left]]:
                    valid -= 1
                window[s[left]] -= 1
                left += 1
    
    return s[start:start+length] if length != float('inf') else ""
```
76
```python
from typing import List

def combine(n: int, k: int) -> List[List[int]]:
    def backtrack(start, current_combination):
        if len(current_combination) == k:
            result.append(current_combination[:])

        for i in range(start, n + 1):
            current_combination.append(i)
            backtrack(i + 1, current_combination)
            current_combination.pop()

    result = []
    backtrack(1, [])
    return result
```


Execution time: 12.518159203000096 seconds
```python
def backtrack(start_index, current_combination, k, n, memo):
    # Base case: if the size of the current combination is equal to k, add it to the result
    if len(current_combination) == k:
        combinations.append(tuple(sorted(current_combination)))
        return
    
    # Prune impossible combinations early in the recursion based on the remaining target size and the current number
    for i in range(start_index, n + 1):
        if tuple(sorted(current_combination)) not in memo:
            current_combination.append(i)
            backtrack(i + 1, current_combination, k, n, memo)
            # "undo" the decision by removing the number from the current combination
            current_combination.pop()

def generate_combinations(n, k):
    combinations = []
    memo = set()
    
    backtrack(1, [], k, n, memo)
    return list(set(combinations))

# Test the function
n = 5
k = 3
print(generate_combinations(n, k))
```
77
```python
def subsets(nums):
    n = len(nums)
    num_subsets = 1 << n
    result = []

    for i in range(num_subsets):
        subset = []
        for j in range(n):
            if i & (1 << j):
                subset.append(nums[j])
        result.append(subset)
    return result
```


Execution time: 13.16464409199989 seconds
```python
def get_power_set(input_array):
    n = len(input_array)
    num_subsets = 2 ** n
    
    result = []
    
    for i in range(num_subsets):
        subset = []
        bit_mask = i
        
        # Loop through each element in the input array
        for j in range(n):
            # Check if the corresponding bit is set (1) in the current number
            if (bit_mask & (1 << j)) != 0:
                # If the bit is set, include the current element in the subset
                subset.append(input_array[j])
        
        result.append(subset)
    
    return result

# Example usage:
input_array = [1, 2, 3]
result = get_power_set(input_array)

for i, subset in enumerate(result):
    print(f"Subset {i}: {subset}")
```

This code directly solves the problem using bit manipulation and iteration over the input array. It generates all possible subsets of a given set using bitwise operations to toggle between sets at each iteration during the loop, facilitating quick addition of subsets to a result list without needing additional data structures or complex branching logic.
78
```python
def exist(board, word):
    m, n = len(board), len(board[0])

    def dfs(i, j, k):
        if not 0 <= i < m or not 0 <= j < n or board[i][j] != word[k]:
            return False
        if k == len(word) - 1:
            return True

        tmp, board[i][j] = board[i][j], '/'
        res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)
        board[i][j] = tmp
        return res

    for i in range(m):
        for j in range(n):
            if dfs(i, j, 0):
                return True
    return False
```



Execution time: 21.49873661200013 seconds
```python
from collections import deque

def bfs(board, word):
    if not board:
        return False
    
    rows, cols = len(board), len(board[0])
    visited = [[False for _ in range(cols)] for _ in range(rows)]
    
    queue = deque([(i, j, k) for i in range(rows) for j in range(cols) if board[i][j] == word[k]])
    
    while queue:
        i, j, k = queue.popleft()
        
        if k + 1 == len(word):
            return True
        
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        
        for di, dj in directions:
            ni, nj = i + di, j + dj
            
            if 0 <= ni < rows and 0 <= nj < cols and not visited[ni][nj] and board[ni][nj] == word[k+1]:
                queue.append((ni, nj, k+1))
                visited[ni][nj] = True
                
    return False
```

```python
from collections import deque

def bfs_priority_queue(board, word):
    if not board:
        return False
    
    rows, cols = len(board), len(board[0])
    visited = [[False for _ in range(cols)] for _ in range(rows)]
    
    queue = deque([(i, j, k) for i in range(rows) for j in range(cols) if board[i][j] == word[k]])
    
    while queue:
        i, j, k = queue.popleft()
        
        if k + 1 == len(word):
            return True
        
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        
        for di, dj in directions:
            ni, nj = i + di, j + dj
            
            if 0 <= ni < rows and 0 <= nj < cols and not visited[ni][nj]:
                queue.append((ni, nj, k+1))
                visited[ni][nj] = True
                
    return False
```

```python
from collections import deque

def iddfs(board, word):
    if not board:
        return False
    
    rows, cols = len(board), len(board[0])
    
    for depth in range(len(word)):
        result = bfs_priority_queue(board, word[:depth+1])
        
        if result:
            break
            
    return result
```

```python
from collections import deque

def a_star_search(board, word):
    if not board:
        return False
    
    rows, cols = len(board), len(board[0])
    
    heuristic = lambda i, j: abs(i - (len(word) - 1)) + abs(j - (len(word) - 1))
    
    queue = deque([(i, j, k, heuristic(i, j)) for i in range(rows) for j in range(cols) if board[i][j] == word[k]])
    
    while queue:
        i, j, k, h = queue.popleft()
        
        if k + 1 == len(word):
            return True
        
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        
        for di, dj in directions:
            ni, nj = i + di, j + dj
            
            if 0 <= ni < rows and 0 <= nj < cols:
                queue.append((ni, nj, k+1, h + heuristic(ni, nj)))
                
    return False
```

```python
from collections import deque

def beam_search(board, word):
    if not board:
        return False
    
    rows, cols = len(board), len(board[0])
    
    beam_size = 10
    
    queue = deque([(i, j, k) for i in range(rows) for j in range(cols) if board[i][j] == word[k]])
    
    while queue and not any(item[-1] == len(word) - 1 for item in queue):
        new_queue = deque()
        
        for i, j, k in queue:
            directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
            
            for di, dj in directions:
                ni, nj = i + di, j + dj
                
                if 0 <= ni < rows and 0 <= nj < cols:
                    new_queue.append((ni, nj, k+1))
                    
        queue = deque(sorted(new_queue, key=lambda item: len(item), reverse=True)[:beam_size])
        
    return any(item[-1] == len(word) - 1 for item in queue)
```
79
```python
def remove_duplicates(nums):
    i = 0
    for num in nums:
        if i < 2 or num > nums[i - 2]:
            nums[i] = num
            i += 1
    return i
```


Execution time: 11.87536899099996 seconds
```python
def remove_duplicates(nums):
    if not nums:
        return 0
    
    i = 0
    for num in nums:
        if (i < 2) or (num > nums[i-2]):
            nums[i] = num
            i += 1
    
    return i
```
80
```python
def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] == target:
            return True

        if nums[mid] == nums[left]:
            left += 1
        elif nums[mid] > nums[left]:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return False
```


Execution time: 14.147833340000034 seconds
```python
def modified_binary_search(arr, target):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return True
        
        # Check if middle element is smaller than or equal to the left element
        if arr[mid] <= arr[left]:
            # Target can be in the left half, adjust right pointer accordingly
            if target >= arr[left] and target < arr[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:  
            # Target must be in the right half, adjust left pointer accordingly
            if target > arr[mid] and target <= arr[right]:
                left = mid + 1
            else:
                right = mid - 1
                
    return False

# Example usage
arr = [3, 6, 19, 38]
target = 38
print(modified_binary_search(arr, target))  # Output: True

arr = [5, 17, 28, 32, 35, 42, 45, 48, 50, 53]
target = 10
print(modified_binary_search(arr, target))  # Output: False
```
81
```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def deleteDuplicates(head):
    dummy = ListNode(0)
    dummy.next = head
    prev, curr = dummy, head
    while curr:
        while curr.next and curr.val == curr.next.val:
            curr = curr.next
        if prev.next == curr:
            prev = prev.next
        else:
            prev.next = curr.next
        curr = curr.next
    return dummy.next
```


Execution time: 12.290515948999882 seconds
```python
# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        dummy = ListNode(0)
        prev = dummy
        curr = head
        while curr:
            count = 1
            while curr.next and curr.next.val == curr.val:
                curr = curr.next
                count += 1
            if prev.next != curr:
                prev.next = curr.next
            else:
                prev = curr
            curr = curr.next
        return dummy.next
```
82
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def delete_duplicates(head):
    current = head
    while current and current.next:
        if current.next.val == current.val:
            current.next = current.next.next
        else:
            current = current.next
    return head
```


Execution time: 12.731512621000093 seconds
```python
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

def delete_duplicates(head):
    current = head
    
    while current and current.next:
        if current.data == current.next.data:
            current.next = current.next.next
        else:
            current = current.next
            
    return head

# Example usage:
node1 = Node(1)
node2 = Node(1)
node3 = Node(2)
node4 = Node(3)

node1.next = node2
node2.next = node3
node3.next = node4

head = delete_duplicates(node1)

while head:
    print(head.data, end=" ")
    head = head.next
    
```
83
```python
def largestRectangleArea(heights):
    stack = []
    max_area = 0
    for i, h in enumerate(heights + [0]):
        while stack and heights[stack[-1]] > h:
            height = heights[stack.pop()]
            width = i if not stack else i - stack[-1] - 1
            max_area = max(max_area, height * width)
        stack.append(i)
    return max_area
```


Execution time: 12.693224074 seconds
```python
def maxArea(heights):
    n = len(heights)
    max_area = 0
    stack = []
    
    for i in range(n + 1):
        while stack and (i == n or heights[stack[-1]] < heights[i]):
            top_of_stack = stack.pop()
            width = i - stack[-1] - 1 if stack else i
            area = heights[top_of_stack] * width
            max_area = max(max_area, area)
        stack.append(i)
    
    return max_area

# Test the function with a sample input
heights = [1,8,6,2,5,4,8,3,7]
print(maxArea(heights))  # Output: 49
```
84
```python
def maximalRectangle(matrix):
    if not matrix:
        return 0

    m = len(matrix)
    n = len(matrix[0])
    height = [0] * (n + 1)
    max_area = 0

    for i in range(m):
        s = []
        for j in range(n + 1):
            if j < n:
                height[j] = height[j] + 1 if matrix[i][j] == '1' else 0
            while s and height[j] < height[s[-1]]:
                h = height[s.pop()]
                w = j if not s else j - s[-1] - 1
                max_area = max(max_area, h * w)
            s.append(j)

    return max_area
```



Execution time: 12.472779183000057 seconds
```python
def maximal_area(matrix):
    if not matrix:
        return 0
    
    m, n = len(matrix), len(matrix[0])
    
    stack = []
    max_area = 0
    
    for i in range(m):
        height_array = [matrix[i][j] for j in range(n)]
        
        j = 0
        while j < n:
            if not stack or matrix[i][stack[-1]] <= matrix[i][j]:
                stack.append(j)
                j += 1
            else:
                h = matrix[i][stack.pop()]
                w = (j - stack[-1] - 1) if stack else j
                
                max_area = max(max_area, h * w)
        
        while stack:
            h = matrix[i][stack.pop()]
            w = (n - stack[-1] - 1) if stack else n
            
            max_area = max(max_area, h * w)
    
    return max_area
```
85
```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def partition(head, x):
    less_head = ListNode(0)
    more_head = ListNode(0)
    less_ptr, more_ptr = less_head, more_head
    
    while head:
        if head.val < x:
            less_ptr.next = head
            less_ptr = head
        else:
            more_ptr.next = head
            more_ptr = head
        head = head.next
    
    less_ptr.next = more_head.next
    more_ptr.next = None
    
    return less_head.next
```


Execution time: 14.069818704 seconds
```python
# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def partition(self, head: ListNode, x: int) -> ListNode:
        less_head = ListNode(0)
        more_head = ListNode(0)
        
        less_ptr = less_head
        more_ptr = more_head
        
        while head:
            if head.val < x:
                less_ptr.next = head
                less_ptr = less_ptr.next
            else:
                more_ptr.next = head
                more_ptr = more_ptr.next
            
            head = head.next
        
        less_ptr.next = more_head.next
        more_ptr.next = None
        
        return less_head.next

# Create the linked list: 1 -> 4 -> 3 -> 2 -> 5 -> 2
head = ListNode(1)
head.next = ListNode(4)
head.next.next = ListNode(3)
head.next.next.next = ListNode(2)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = ListNode(2)

solution = Solution()
result = solution.partition(head, 3)

while result:
    print(result.val, end=" -> ")
    result = result.next
print("None")
```
86
```python
def isScramble(s1: str, s2: str) -> bool:
    if s1 == s2:
        return True
    if len(s1) != len(s2) or sorted(s1) != sorted(s2):
        return False

    for i in range(1, len(s1)):
        if (isScramble(s1[:i], s2[:i]) and isScramble(s1[i:], s2[i:])) or \
           (isScramble(s1[:i], s2[-i:]) and isScramble(s1[i:], s2[:-i])):
            return True
    return False
```


Execution time: 12.650996950000035 seconds
```python
def isScramble(s1: str, s2: str) -> bool:
    if len(s1) != len(s2):
        return False
    if sorted(s1) != sorted(s2):
        return False
    memo = {}
    
    def helper(start1, start2, length):
        key = (start1, start2, length)
        if key in memo:
            return memo[key]
        
        if length == 0:
            return True
        for i in range(1, length + 1):
            if helper(start1, start2, i) and \
               helper(start1 + i, start2 + i, length - i) or \
               helper(start1, start2 + length - i, i) and \
               helper(start1 + i, start2, length - i):
                memo[key] = True
                return True
        
        memo[key] = False
        return False
    
    return helper(0, 0, len(s1))
```
87
```python
def merge(nums1, m, nums2, n):
    i, j, k = m - 1, n - 1, m + n - 1
    while i >= 0 and j >= 0:
        if nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1
    while j >= 0:
        nums1[k] = nums2[j]
        k -= 1
        j -= 1
```


Execution time: 15.165644719000056 seconds
```python
def merge(nums1, m, nums2, n):
    i, j, k = m - 1, n - 1, len(nums1) - 1
    while i >= 0 and j >= 0:
        if nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1
    while j >= 0:
        nums1[k] = nums2[j]
        j -= 1
        k -= 1

# Example usage:
nums1 = [1, 2, 3, 4, 5]
m = len(nums1) - 3
nums2 = [6, 7, 8]
n = len(nums2)
merge(nums1, m, nums2, n)
print(nums1)  # Output: [1, 2, 3, 4, 5, 6, 7, 8]

nums1 = [1, 2, 0]
m = len(nums1) - 1
nums2 = [2, 5, 6]
n = len(nums2)
merge(nums1, m, nums2, n)
print(nums1)  # Output: [1, 2, 2, 5, 6]

nums1 = []
m = 0
nums2 = [1, 2, 3]
n = len(nums2)
merge(nums1, m, nums2, n)
print(nums1)  # Output: [1, 2, 3]

nums1 = [1, 9]
m = len(nums1) - 1
nums2 = []
n = 0
merge(nums1, m, nums2, n)
print(nums1)  # Output: [1]
```
88
```python
def grayCode(n):
    result = []
    for i in range(1 << n):
        result.append(i ^ (i >> 1))
    return result
```


Execution time: 11.777331760999914 seconds
```python
def generate_gray_code(n):
    """
    Generates an n-bit gray code sequence.

    Args:
        n (int): The number of bits in the gray code sequence.

    Returns:
        list: A list of integers representing the gray code sequence.
    """

    result = []
    for i in range(2**n):
        gray_code_value = i ^ (i >> 1)
        result.append(gray_code_value)

    return result


# Example usage
n = 4
print(generate_gray_code(n))
```
89
```python
from itertools import combinations

def subsetsWithDup(nums):
    result = set()
    nums.sort()
    for i in range(len(nums) + 1):
        for combo in combinations(nums, i):
            result.add(combo)
    return list(result)
```


Execution time: 12.115702302000045 seconds
```python
from itertools import chain, combinations

def powerset(array):
    return list(chain(*map(lambda x: combinations(array, x), range(0, len(array) + 1))))

def unique_subsets(array):
    result = set()
    
    for subset in powerset(array):
        if tuple(sorted(subset)) not in result:
            result.add(tuple(sorted(subset)))
            
    return [list(s) for s in result]
    
print(unique_subsets([1, 2, 3]))
```
90
```python
def numDecodings(s: str) -> int:
    n = len(s)
    dp = [0] * (n + 1)
    dp[0] = 1
    dp[1] = 1 if s[0] != '0' else 0

    for i in range(2, n + 1):
        one_digit = int(s[i - 1:i])
        two_digits = int(s[i - 2:i])

        if one_digit >= 1:
            dp[i] += dp[i - 1]
        if two_digits >= 10 and two_digits <= 26:
            dp[i] += dp[i - 2]
    return dp[n]
```



Execution time: 12.246471436999855 seconds
```python
def num_decodings(s):
    n = len(s)
    dp = [0]*(n+1)
    dp[0] = 1
    
    for i in range(1, n+1):
        if '0' <= s[i-1] <= '9':
            dp[i] += dp[i-1]
        if i >= 2 and ('10' <= s[i-2:i] <= '26'):
            dp[i] += dp[i-2]
    
    return dp[n]

# Example usage:
print(num_decodings("226")) # Output: 3
```
91
```python
def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
    if not head or left == right:
        return head
    dummy = ListNode(0)
    dummy.next = head
    pre = dummy
    for _ in range(left - 1):
        pre = pre.next
    cur = pre.next
    for _ in range(left, right):
        t = cur.next
        cur.next = t.next
        t.next = pre.next
        pre.next = t
    return dummy.next
```


Execution time: 11.913586677000012 seconds
```python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def reverseBetween(head, m, n):
    dummy = ListNode(0)
    dummy.next = head
    pre = dummy
    
    for _ in range(m - 1):
        pre = pre.next
        
    cur = pre.next
        
    for _ in range(n - m):
        t = cur.next
        cur.next = t.next
        t.next = pre.next
        pre.next = t
        
    return dummy.next
```
92
```python
def restore_ip_addresses(s):
    def dfs(s, start, ip, result, part):
        if part == 4 and start == len(s):
            result.append(ip[:-1])
            return
        if part == 4 or start >= len(s):
            return

        num = 0
        for i in range(start, len(s)):
            num = num * 10 + int(s[i])
            if num > 255:
                break
            dfs(s, i + 1, ip + s[i] + ".", result, part + 1)
            if num == 0:
                break

    result = []
    dfs(s, 0, "", result, 0)
    return result
```



Execution time: 12.368665971000155 seconds
```python
def restoreIpAddresses(s):
    def dfs(start, ip, part):
        if part == 4:
            if start == len(s):
                result.append(ip[:-1])
            return
        for i in range(1, min(4, len(s) - start + 1)):
            num = int(s[start:start+i])
            if num <= 255 and (i == 1 or s[start] != '0'):
                dfs(start + i, ip + (str(num) + '.' if part else str(num)) , part + 1)

    result = []
    dfs(0, "", 0)
    return result

s = "25525511135"
print(restoreIpAddresses(s))
```
93
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def inorderTraversalHelper(root, result):
    if not root:
        return
    inorderTraversalHelper(root.left, result)
    result.append(root.val)
    inorderTraversalHelper(root.right, result)

def inorderTraversal(root):
    result = []
    inorderTraversalHelper(root, result)
    return result
```


Execution time: 12.367125176000172 seconds
```python
class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def inorderTraversalHelper(node, result):
    if node is not None:
        inorderTraversalHelper(node.left, result)
        result.append(node.val)
        inorderTraversalHelper(node.right, result)

def inorderTraversal(root):
    result = []
    inorderTraversalHelper(root, result)
    return result

# Test the function
root = Node(4)
root.left = Node(2)
root.right = Node(5)
root.left.left = Node(1)
root.left.right = Node(3)

print(inorderTraversal(root))  # Output: [1, 2, 3, 4, 5]
```
94
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def generate_trees(start, end):
    trees = []
    if start > end:
        trees.append(None)
        return trees

    for i in range(start, end + 1):
        left_subtrees = generate_trees(start, i - 1)
        right_subtrees = generate_trees(i + 1, end)

        for left in left_subtrees:
            for right in right_subtrees:
                new_node = TreeNode(i)
                new_node.left = left
                new_node.right = right
                trees.append(new_node)

    return trees

def generate_trees(n):
    if n == 0:
        return []
    return generate_trees(1, n)
```



Execution time: 12.096495878000042 seconds
```python
def generateTrees(start, end):
    memo = {}

    def _generateTrees(start, end):
        if (start, end) in memo:
            return memo[(start, end)]

        if start > end:
            return [[]]

        trees = []
        for i in range(start, end + 1):
            left_trees = _generateTrees(start, i - 1)
            right_trees = _generateTrees(i + 1, end)

            for l in left_trees:
                for r in right_trees:
                    trees.append([i] + l + r)

        memo[(start, end)] = trees
        return trees

    return _generateTrees(start, end)


print(generateTrees(1, 3))
```
95
```python
def numTrees(n):
    dp = [0] * (n + 1)
    dp[0] = 1
    dp[1] = 1
    for i in range(2, n + 1):
        for j in range(i):
            dp[i] += dp[j] * dp[i - j - 1]
    return dp[n]
```


Execution time: 11.813631232999796 seconds
```python
def num_unique_bsts(n):
    dp = [0]*(n+1)
    dp[0], dp[1] = 1, 1
    
    for i in range(2, n + 1):
        for j in range(i):
            dp[i] += dp[j] * dp[i - j - 1]
    
    return dp[n]

# Test the function
print(num_unique_bsts(3))  
```
96
```python
def isInterleave(s1, s2, s3):
    m, n = len(s1), len(s2)
    if m + n != len(s3):
        return False

    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True
    for i in range(1, m + 1):
        dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]
    for j in range(1, n + 1):
        dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or \
                       (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])

    return dp[m][n]
```


Execution time: 13.67430764899973 seconds
```python
def is_interleaved(s1: str, s2: str, s3: str) -> bool:
    if len(s1) + len(s2) != len(s3):
        return False
    
    m, n = len(s1), len(s2)
    
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True
    
    for i in range(1, m + 1):
        dp[i][0] = dp[i-1][0] and s3[i - 1] == s1[i - 1]
        
    for j in range(1, n + 1):
        dp[0][j] = dp[0][j-1] and s3[j - 1] == s2[j - 1]
        
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j] = (dp[i-1][j] and s3[i+j-1] == s1[i-1]) or (dp[i][j-1] and s3[i+j-1] == s2[j-1])
            
    return dp[m][n]
```
97
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isValidBSTHelper(node, min_val, max_val):
    if node is None:
        return True
    if not min_val < node.val < max_val:
        return False
    return (isValidBSTHelper(node.left, min_val, node.val) and
            isValidBSTHelper(node.right, node.val, max_val))

def isValidBST(root):
    return isValidBSTHelper(root, float('-inf'), float('inf'))
```


Execution time: 13.599174583999684 seconds
```python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def isValidBST(root):
    return isValidBSTHelper(root, float('-inf'), float('inf'))

def isValidBSTHelper(node, min_val=float('-inf'), max_val=float('inf')):
    if node is None:
        return True
    elif not min_val < node.val or not node.val < max_val:
        return False
    else:
        return (isValidBSTHelper(node.left, min_val, node.val) and 
                isValidBSTHelper(node.right, node.val, max_val))

# Example usage
root = TreeNode(5)
root.left = TreeNode(3)
root.right = TreeNode(7)
root.left.left = TreeNode(2)
root.left.right = TreeNode(4)
root.right.left = TreeNode(6)
root.right.right = TreeNode(8)

print(isValidBST(root))  # Output: True

invalid_root = TreeNode(5)
invalid_root.left = TreeNode(10)
invalid_root.right = TreeNode(3)

print(isValidBST(invalid_root))  # Output: False
```
98
```python
def inorder(node, nodes):
    if not node: return
    inorder(node.left, nodes)
    if nodes[1] and nodes[1].val > node.val:
        if not nodes[0]: nodes[0] = nodes[1]
        nodes[2] = node
    nodes[1] = node
    inorder(node.right, nodes)

def recoverTree(root):
    nodes = [None, None, None]
    inorder(root, nodes)
    nodes[0].val, nodes[2].val = nodes[2].val, nodes[0].val
```


Execution time: 14.356070789000114 seconds
```python
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        prev_node = None
        first_node = None
        second_node = None
        
        stack = []
        
        while True:
            if not stack and not root:
                break
                
            if root:
                stack.append(root)
                root = root.left
            
            else:
                node = stack.pop()
                
                if prev_node is not None and prev_node.val > node.val:
                    if first_node is None:
                        first_node = prev_node
                    second_node = node
                    
                prev_node = node
                
                if node.right:
                    root = node.right
        
        temp_val = first_node.val
        first_node.val = second_node.val
        second_node.val = temp_val

# Example usage:
solution = Solution()

# Create a binary search tree:
#         4
#        / \
#       2   6
#      / \   \
#     1   3   5

root = TreeNode(4)
root.left = TreeNode(2)
root.right = TreeNode(6)
root.left.left = TreeNode(1)
root.left.right = TreeNode(3)
root.right.right = TreeNode(5)

solution.recoverTree(root)

# Print the values of the nodes to verify the swap:
print(root.val)  # Should print: 2
print(root.left.val)  # Should print: 4
print(root.right.val)  # Should print: 6
print(root.left.left.val)  # Should print: 1
print(root.left.right.val)  # Should print: 3
print(root.right.right.val)  # Should print: 5

```
99
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_same_tree(p, q):
    if p is None and q is None:
        return True
    if p is None or q is None:
        return False
    if p.val != q.val:
        return False
    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)
```



Execution time: 11.566781895000076 seconds
```python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def isSameTree(p, q):
    return p and q and (p.val == q.val) and isSameTree(p.left,q.left) and isSameTree(p.right,q.right) or not p and not q
```
